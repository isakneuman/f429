
f429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000228c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080024f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000054  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007857  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178e  00000000  00000000  000278fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  00029090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000324a  00000000  00000000  00029e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000063e0  00000000  00000000  0002d072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3201  00000000  00000000  00033452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d6653  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024e4  00000000  00000000  000d66a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002424 	.word	0x08002424

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08002424 	.word	0x08002424

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	2300      	movs	r3, #0
 80002a4:	60fb      	str	r3, [r7, #12]

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	e076      	b.n	800039a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002ac:	2201      	movs	r2, #1
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	fa02 f303 	lsl.w	r3, r2, r3
 80002b4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	4013      	ands	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d165      	bne.n	8000394 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	4619      	mov	r1, r3
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d003      	beq.n	8000306 <GPIO_Init+0x76>
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d12e      	bne.n	8000364 <GPIO_Init+0xd4>
      {

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	689a      	ldr	r2, [r3, #8]
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	2103      	movs	r1, #3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	43db      	mvns	r3, r3
 8000316:	401a      	ands	r2, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689a      	ldr	r2, [r3, #8]
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	4619      	mov	r1, r3
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	fa01 f303 	lsl.w	r3, r1, r3
 800032e:	431a      	orrs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	609a      	str	r2, [r3, #8]


        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	b29b      	uxth	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	2301      	movs	r3, #1
 8000340:	408b      	lsls	r3, r1
 8000342:	43db      	mvns	r3, r3
 8000344:	401a      	ands	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	7992      	ldrb	r2, [r2, #6]
 8000352:	4611      	mov	r1, r2
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	b292      	uxth	r2, r2
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	b292      	uxth	r2, r2
 800035e:	431a      	orrs	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68da      	ldr	r2, [r3, #12]
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	b29b      	uxth	r3, r3
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	43db      	mvns	r3, r3
 8000376:	401a      	ands	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	79db      	ldrb	r3, [r3, #7]
 8000384:	4619      	mov	r1, r3
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	3301      	adds	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	2b0f      	cmp	r3, #15
 800039e:	d985      	bls.n	80002ac <GPIO_Init+0x1c>
    }
  }
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b085      	sub	sp, #20
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
 80003b6:	460b      	mov	r3, r1
 80003b8:	807b      	strh	r3, [r7, #2]
 80003ba:	4613      	mov	r3, r2
 80003bc:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003c6:	787a      	ldrb	r2, [r7, #1]
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	f003 0307 	and.w	r3, r3, #7
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	fa02 f303 	lsl.w	r3, r2, r3
 80003d4:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	08db      	lsrs	r3, r3, #3
 80003da:	b29b      	uxth	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3208      	adds	r2, #8
 80003e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	f003 0307 	and.w	r3, r3, #7
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	210f      	movs	r1, #15
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	8879      	ldrh	r1, [r7, #2]
 80003f8:	08c9      	lsrs	r1, r1, #3
 80003fa:	b289      	uxth	r1, r1
 80003fc:	4608      	mov	r0, r1
 80003fe:	ea02 0103 	and.w	r1, r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f100 0208 	add.w	r2, r0, #8
 8000408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	08db      	lsrs	r3, r3, #3
 8000410:	b29b      	uxth	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	3208      	adds	r2, #8
 8000418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	4313      	orrs	r3, r2
 8000420:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000422:	887b      	ldrh	r3, [r7, #2]
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	b29b      	uxth	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3208      	adds	r2, #8
 800042e:	68b9      	ldr	r1, [r7, #8]
 8000430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08a      	sub	sp, #40	; 0x28
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800044e:	2300      	movs	r3, #0
 8000450:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000452:	2304      	movs	r3, #4
 8000454:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <I2C_Init+0x174>)
 8000458:	61fb      	str	r3, [r7, #28]
  RCC_ClocksTypeDef  rcc_clocks;
  /* Check the parameters */

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000466:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f8e3 	bl	8000638 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000472:	697b      	ldr	r3, [r7, #20]
 8000474:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	4a4f      	ldr	r2, [pc, #316]	; (80005b8 <I2C_Init+0x178>)
 800047a:	fba2 2303 	umull	r2, r3, r2, r3
 800047e:	0c9b      	lsrs	r3, r3, #18
 8000480:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000482:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000486:	4313      	orrs	r3, r2
 8000488:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800048a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	605a      	str	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000498:	4013      	ands	r3, r2
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a45      	ldr	r2, [pc, #276]	; (80005bc <I2C_Init+0x17c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d815      	bhi.n	80004d8 <I2C_Init+0x98>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	69fa      	ldr	r2, [r7, #28]
 80004b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004b8:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80004ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d801      	bhi.n	80004c4 <I2C_Init+0x84>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80004c0:	2304      	movs	r3, #4
 80004c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80004c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004c8:	4313      	orrs	r3, r2
 80004ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80004cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004ce:	3301      	adds	r3, #1
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	621a      	str	r2, [r3, #32]
 80004d6:	e041      	b.n	800055c <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	88db      	ldrh	r3, [r3, #6]
 80004dc:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d109      	bne.n	80004f8 <I2C_Init+0xb8>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	69fa      	ldr	r2, [r7, #28]
 80004f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80004f6:	e00e      	b.n	8000516 <I2C_Init+0xd6>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4613      	mov	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	009a      	lsls	r2, r3, #2
 8000504:	4413      	add	r3, r2
 8000506:	69fa      	ldr	r2, [r7, #28]
 8000508:	fbb2 f3f3 	udiv	r3, r2, r3
 800050c:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800050e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000514:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800051c:	2b00      	cmp	r3, #0
 800051e:	d103      	bne.n	8000528 <I2C_Init+0xe8>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000528:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800052a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800052c:	4313      	orrs	r3, r2
 800052e:	b29b      	uxth	r3, r3
 8000530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000538:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800053a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800053c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <I2C_Init+0x180>)
 8000546:	fb82 1203 	smull	r1, r2, r2, r3
 800054a:	1192      	asrs	r2, r2, #6
 800054c:	17db      	asrs	r3, r3, #31
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	b29b      	uxth	r3, r3
 8000552:	3301      	adds	r3, #1
 8000554:	b29b      	uxth	r3, r3
 8000556:	461a      	mov	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	621a      	str	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800055c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	61da      	str	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f043 0201 	orr.w	r2, r3, #1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000576:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800057a:	f023 0302 	bic.w	r3, r3, #2
 800057e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	889a      	ldrh	r2, [r3, #4]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	895b      	ldrh	r3, [r3, #10]
 8000588:	4313      	orrs	r3, r2
 800058a:	b29a      	uxth	r2, r3
 800058c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800058e:	4313      	orrs	r3, r2
 8000590:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	601a      	str	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	899a      	ldrh	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	891b      	ldrh	r3, [r3, #8]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	609a      	str	r2, [r3, #8]
}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	; 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	007a1200 	.word	0x007a1200
 80005b8:	431bde83 	.word	0x431bde83
 80005bc:	000186a0 	.word	0x000186a0
 80005c0:	10624dd3 	.word	0x10624dd3

080005c4 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <I2C_Cmd+0x20>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f043 0201 	orr.w	r2, r3, #1
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 80005e2:	e006      	b.n	80005f2 <I2C_Cmd+0x2e>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80005ec:	4013      	ands	r3, r2
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr

080005fe <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d006      	beq.n	800061e <I2C_AcknowledgeConfig+0x20>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 800061c:	e006      	b.n	800062c <I2C_AcknowledgeConfig+0x2e>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000626:	4013      	ands	r3, r2
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000638:	b480      	push	{r7}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	2302      	movs	r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 030c 	and.w	r3, r3, #12
 8000660:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	2b08      	cmp	r3, #8
 8000666:	d011      	beq.n	800068c <RCC_GetClocksFreq+0x54>
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	2b08      	cmp	r3, #8
 800066c:	d83c      	bhi.n	80006e8 <RCC_GetClocksFreq+0xb0>
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <RCC_GetClocksFreq+0x44>
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d004      	beq.n	8000684 <RCC_GetClocksFreq+0x4c>
 800067a:	e035      	b.n	80006e8 <RCC_GetClocksFreq+0xb0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <RCC_GetClocksFreq+0x140>)
 8000680:	601a      	str	r2, [r3, #0]
    break;
 8000682:	e035      	b.n	80006f0 <RCC_GetClocksFreq+0xb8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
    break;
 800068a:	e031      	b.n	80006f0 <RCC_GetClocksFreq+0xb8>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800068c:	4b39      	ldr	r3, [pc, #228]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	0d9b      	lsrs	r3, r3, #22
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000698:	4b36      	ldr	r3, [pc, #216]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006a0:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d004      	beq.n	80006b2 <RCC_GetClocksFreq+0x7a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006a8:	4b32      	ldr	r3, [pc, #200]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
 80006b0:	e00b      	b.n	80006ca <RCC_GetClocksFreq+0x92>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006b2:	4a31      	ldr	r2, [pc, #196]	; (8000778 <RCC_GetClocksFreq+0x140>)
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ba:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 80006bc:	6852      	ldr	r2, [r2, #4]
 80006be:	0992      	lsrs	r2, r2, #6
 80006c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006ca:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	f003 0303 	and.w	r3, r3, #3
 80006d4:	3301      	adds	r3, #1
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
    break;
 80006e6:	e003      	b.n	80006f0 <RCC_GetClocksFreq+0xb8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a23      	ldr	r2, [pc, #140]	; (8000778 <RCC_GetClocksFreq+0x140>)
 80006ec:	601a      	str	r2, [r3, #0]
    break;
 80006ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	091b      	lsrs	r3, r3, #4
 80006fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000700:	4a1e      	ldr	r2, [pc, #120]	; (800077c <RCC_GetClocksFreq+0x144>)
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	40da      	lsrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000720:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	0a9b      	lsrs	r3, r3, #10
 8000726:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <RCC_GetClocksFreq+0x144>)
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	40da      	lsrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <RCC_GetClocksFreq+0x13c>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000748:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	0b5b      	lsrs	r3, r3, #13
 800074e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <RCC_GetClocksFreq+0x144>)
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685a      	ldr	r2, [r3, #4]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	40da      	lsrs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	60da      	str	r2, [r3, #12]
}
 8000768:	bf00      	nop
 800076a:	3724      	adds	r7, #36	; 0x24
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800
 8000778:	00f42400 	.word	0x00f42400
 800077c:	20000000 	.word	0x20000000

08000780 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d006      	beq.n	80007a0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <RCC_AHB1PeriphClockCmd+0x3c>)
 8000794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000796:	4909      	ldr	r1, [pc, #36]	; (80007bc <RCC_AHB1PeriphClockCmd+0x3c>)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800079e:	e006      	b.n	80007ae <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800

080007c0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <RCC_APB1PeriphClockCmd+0x3c>)
 80007d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d6:	4909      	ldr	r1, [pc, #36]	; (80007fc <RCC_APB1PeriphClockCmd+0x3c>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007de:	e006      	b.n	80007ee <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <RCC_APB1PeriphClockCmd+0x3c>)
 80007e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4904      	ldr	r1, [pc, #16]	; (80007fc <RCC_APB1PeriphClockCmd+0x3c>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  if (NewState != DISABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800081e:	e006      	b.n	800082e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	43db      	mvns	r3, r3
 8000828:	4904      	ldr	r1, [pc, #16]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 800082a:	4013      	ands	r3, r2
 800082c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000866:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	88db      	ldrh	r3, [r3, #6]
 800086c:	461a      	mov	r2, r3
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	4313      	orrs	r3, r2
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	611a      	str	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800088a:	f023 030c 	bic.w	r3, r3, #12
 800088e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	889a      	ldrh	r2, [r3, #4]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	891b      	ldrh	r3, [r3, #8]
 8000898:	4313      	orrs	r3, r2
 800089a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008a0:	4313      	orrs	r3, r2
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	4313      	orrs	r3, r2
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60da      	str	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	899b      	ldrh	r3, [r3, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	4313      	orrs	r3, r2
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	615a      	str	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff feaa 	bl	8000638 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a31      	ldr	r2, [pc, #196]	; (80009ac <USART_Init+0x16c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d003      	beq.n	80008f4 <USART_Init+0xb4>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <USART_Init+0x170>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d102      	bne.n	80008fa <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	e001      	b.n	80008fe <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00c      	beq.n	8000924 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800090a:	6a3a      	ldr	r2, [r7, #32]
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	009a      	lsls	r2, r3, #2
 8000914:	441a      	add	r2, r3
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	e00b      	b.n	800093c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000924:	6a3a      	ldr	r2, [r7, #32]
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4413      	add	r3, r2
 800092c:	009a      	lsls	r2, r3, #2
 800092e:	441a      	add	r2, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <USART_Init+0x174>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	095b      	lsrs	r3, r3, #5
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	fb02 f303 	mul.w	r3, r2, r3
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00c      	beq.n	8000980 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	3332      	adds	r3, #50	; 0x32
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <USART_Init+0x174>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097a:	4313      	orrs	r3, r2
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
 800097e:	e00b      	b.n	8000998 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	3332      	adds	r3, #50	; 0x32
 8000986:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <USART_Init+0x174>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	4313      	orrs	r3, r2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	b29b      	uxth	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	609a      	str	r2, [r3, #8]
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	; 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40011400 	.word	0x40011400
 80009b4:	51eb851f 	.word	0x51eb851f

080009b8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 115200;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	220c      	movs	r2, #12
 80009de:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	819a      	strh	r2, [r3, #12]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	460b      	mov	r3, r1
 80009fc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  
  if (NewState != DISABLE)
 80009fe:	78fb      	ldrb	r3, [r7, #3]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <USART_Cmd+0x20>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	60da      	str	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a10:	e006      	b.n	8000a20 <USART_Cmd+0x2e>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ffc2 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <Delay>:

__IO	uint32_t	ms	=	0;


void  Delay (uint32_t nCount)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	uint32_t curr = ms;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <Delay+0x2c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
	while((ms-curr)<nCount);
 8000b0e:	bf00      	nop
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Delay+0x2c>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d8f8      	bhi.n	8000b10 <Delay+0x10>
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	20000090 	.word	0x20000090

08000b30 <init_delay>:



void init_delay(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef  rcc_clocks;
	RCC_GetClocksFreq(&rcc_clocks);
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd7d 	bl	8000638 <RCC_GetClocksFreq>
	uint32_t pclk1 = rcc_clocks.PCLK1_Frequency;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	617b      	str	r3, [r7, #20]
	SysTick_Config(pclk1/1000);
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <init_delay+0x34>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	099b      	lsrs	r3, r3, #6
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffb5 	bl	8000abc <SysTick_Config>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000b52:	f04f 30ff 	mov.w	r0, #4294967295
 8000b56:	f7ff ff69 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	10624dd3 	.word	0x10624dd3

08000b68 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	ms++;
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <SysTick_Handler+0x18>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3301      	adds	r3, #1
 8000b72:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <SysTick_Handler+0x18>)
 8000b74:	6013      	str	r3, [r2, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000090 	.word	0x20000090

08000b84 <init_i2c1_gpio>:
#include "gpio_periph.h"


void	init_i2c1_gpio(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b90:	f7ff fe16 	bl	80007c0 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000b94:	2101      	movs	r1, #1
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff fdf2 	bl	8000780 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef pins;
	pins.GPIO_Pin	=	(1<<I2C1_SDA)|(1<<I2C1_SCL);
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	603b      	str	r3, [r7, #0]
	pins.GPIO_Mode	=	GPIO_Mode_AF;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	713b      	strb	r3, [r7, #4]
	pins.GPIO_PuPd	=	GPIO_PuPd_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71fb      	strb	r3, [r7, #7]
	pins.GPIO_Speed	=	GPIO_Speed_50MHz;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	717b      	strb	r3, [r7, #5]
	pins.GPIO_OType	=	GPIO_OType_OD;
 8000bac:	2301      	movs	r3, #1
 8000bae:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(I2C1_Port, &pins);
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <init_i2c1_gpio+0x54>)
 8000bb6:	f7ff fb6b 	bl	8000290 <GPIO_Init>

	GPIO_PinAFConfig(I2C1_Port, I2C1_SDA, GPIO_AF_I2C1);
 8000bba:	2204      	movs	r2, #4
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <init_i2c1_gpio+0x54>)
 8000bc0:	f7ff fbf5 	bl	80003ae <GPIO_PinAFConfig>
	GPIO_PinAFConfig(I2C1_Port, I2C1_SCL, GPIO_AF_I2C1);
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	2106      	movs	r1, #6
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <init_i2c1_gpio+0x54>)
 8000bca:	f7ff fbf0 	bl	80003ae <GPIO_PinAFConfig>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020400 	.word	0x40020400

08000bdc <init_hc_sr04_gpio>:

void	init_hc_sr04_gpio(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000be2:	2101      	movs	r1, #1
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff fdcb 	bl	8000780 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef pins;
	pins.GPIO_Pin	=	(1<<TRIGG_PIN)|(1<<ECHO_PIN);
 8000bea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bee:	603b      	str	r3, [r7, #0]
	pins.GPIO_Mode	=	GPIO_Mode_AF;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	713b      	strb	r3, [r7, #4]
	GPIO_Init(ULTRA_SOUND_Port, &pins);
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4808      	ldr	r0, [pc, #32]	; (8000c1c <init_hc_sr04_gpio+0x40>)
 8000bfa:	f7ff fb49 	bl	8000290 <GPIO_Init>

	GPIO_PinAFConfig(ULTRA_SOUND_Port, TRIGG_PIN, GPIO_AF_TIM1);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2108      	movs	r1, #8
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <init_hc_sr04_gpio+0x40>)
 8000c04:	f7ff fbd3 	bl	80003ae <GPIO_PinAFConfig>
	GPIO_PinAFConfig(ULTRA_SOUND_Port, ECHO_PIN, GPIO_AF_TIM3);
 8000c08:	2202      	movs	r2, #2
 8000c0a:	2106      	movs	r1, #6
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <init_hc_sr04_gpio+0x40>)
 8000c0e:	f7ff fbce 	bl	80003ae <GPIO_PinAFConfig>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40020000 	.word	0x40020000

08000c20 <__NVIC_EnableIRQ>:
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <TIM1_start>:
{
	TIM3->CR1  &= ~TIM_CR1_CEN;
}

inline void TIM1_start(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	TIM1->CR1  |= TIM_CR1_CEN;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <TIM1_start+0x1c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <TIM1_start+0x1c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40010000 	.word	0x40010000

08000c7c <init_hc_sr04>:
	TIM1->CR1  &= ~TIM_CR1_CEN;
}


void init_hc_sr04(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	init_hc_sr04_gpio();
 8000c80:	f7ff ffac 	bl	8000bdc <init_hc_sr04_gpio>
	init_timers_hc_sr04();
 8000c84:	f000 f954 	bl	8000f30 <init_timers_hc_sr04>
	state |= NEED_TRIG;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <init_hc_sr04+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b01      	ldr	r3, [pc, #4]	; (8000c9c <init_hc_sr04+0x20>)
 8000c96:	701a      	strb	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000094 	.word	0x20000094

08000ca0 <init_trig>:

void init_trig(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|=	RCC_APB2ENR_TIM1EN;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <init_trig+0x5c>)
 8000ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <init_trig+0x5c>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6453      	str	r3, [r2, #68]	; 0x44

	TIM1->PSC 	= 	uS_CALC(HSI_VALUE);
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <init_trig+0x60>)
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR 	= 	TRIGG_DURATION-1;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <init_trig+0x60>)
 8000cb8:	220b      	movs	r2, #11
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 	= 	1;
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <init_trig+0x60>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CR1  	|= 	TIM_CR1_OPM;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <init_trig+0x60>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <init_trig+0x60>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6013      	str	r3, [r2, #0]
	TIM1->BDTR 	|= 	TIM_BDTR_MOE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <init_trig+0x60>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <init_trig+0x60>)
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->CCMR1	|=	0b111<<TIM_CCMR1_OC1M_Pos;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <init_trig+0x60>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <init_trig+0x60>)
 8000ce0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000ce4:	6193      	str	r3, [r2, #24]
	TIM1->CCER 	|= 	(TIM_CCER_CC1E);
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <init_trig+0x60>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <init_trig+0x60>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6213      	str	r3, [r2, #32]
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40010000 	.word	0x40010000

08000d04 <init_echo>:

void init_echo(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	RCC->APB1ENR	|=	RCC_APB1ENR_TIM3EN;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <init_echo+0x68>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <init_echo+0x68>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40

	TIM3->PSC	=	uS_CALC(HSI_VALUE);
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <init_echo+0x6c>)
 8000d16:	220f      	movs	r2, #15
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR	=	TOO_FAR_TIMEOUT-1;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <init_echo+0x6c>)
 8000d1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000d20:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1	|=	TIM_CCMR1_IC1F|
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <init_echo+0x6c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <init_echo+0x6c>)
 8000d28:	f443 4372 	orr.w	r3, r3, #61952	; 0xf200
 8000d2c:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8000d30:	6193      	str	r3, [r2, #24]
	 	 	 	 	TIM_CCMR1_IC2F|
					0b01<<TIM_CCMR1_CC1S_Pos|
					0b10<<TIM_CCMR1_CC2S_Pos;

	TIM3->SMCR 	|=	0b101<<TIM_SMCR_TS_Pos|
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <init_echo+0x6c>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <init_echo+0x6c>)
 8000d38:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8000d3c:	6093      	str	r3, [r2, #8]
			 	 	0b100<<TIM_SMCR_SMS_Pos;

	TIM3->DIER	|=	TIM_DIER_CC1IE|
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <init_echo+0x6c>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <init_echo+0x6c>)
 8000d44:	f043 0307 	orr.w	r3, r3, #7
 8000d48:	60d3      	str	r3, [r2, #12]
			 	 	TIM_DIER_CC2IE|
					TIM_DIER_UIE;

	TIM3->CCER	|= 	TIM_CCER_CC2P|
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <init_echo+0x6c>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <init_echo+0x6c>)
 8000d50:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8000d54:	6213      	str	r3, [r2, #32]
			 	 	TIM_CCER_CC1E|
			 	 	TIM_CCER_CC2E;
	NVIC_EnableIRQ(TIM3_IRQn);
 8000d56:	201d      	movs	r0, #29
 8000d58:	f7ff ff62 	bl	8000c20 <__NVIC_EnableIRQ>

	TIM3->CR1 	|= 	TIM_CR1_CEN;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <init_echo+0x6c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <init_echo+0x6c>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40000400 	.word	0x40000400

08000d74 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	if( TIM3->SR & TIM_SR_CC1IF )
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d029      	beq.n	8000dd8 <TIM3_IRQHandler+0x64>
	{
		TIM3->SR &= ~TIM_SR_CC1IF;
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000d8a:	f023 0302 	bic.w	r3, r3, #2
 8000d8e:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_UIF;
 8000d90:	4b39      	ldr	r3, [pc, #228]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	4a38      	ldr	r2, [pc, #224]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	6113      	str	r3, [r2, #16]

		if(state & WAIT_START_ECHO)
 8000d9c:	4b37      	ldr	r3, [pc, #220]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d010      	beq.n	8000dcc <TIM3_IRQHandler+0x58>
		{
			state &= ~WAIT_START_ECHO;
 8000daa:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	f023 0303 	bic.w	r3, r3, #3
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000db8:	701a      	strb	r2, [r3, #0]
			state |= START_ECHO;
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f043 0304 	orr.w	r3, r3, #4
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e005      	b.n	8000dd8 <TIM3_IRQHandler+0x64>
		}
		else
		{
			measured_time = 0;
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <TIM3_IRQHandler+0x10c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
			state = WTF1|END_ECHO;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000dd4:	2218      	movs	r2, #24
 8000dd6:	701a      	strb	r2, [r3, #0]
		}
	}
	if( TIM3->SR & TIM_SR_CC2IF )
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d028      	beq.n	8000e36 <TIM3_IRQHandler+0xc2>
	{
		if(state & START_ECHO)
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d014      	beq.n	8000e1c <TIM3_IRQHandler+0xa8>
		{
			measured_time = TIM3->CCR2;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <TIM3_IRQHandler+0x10c>)
 8000df8:	6013      	str	r3, [r2, #0]
			state &= ~START_ECHO;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	f023 0307 	bic.w	r3, r3, #7
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e08:	701a      	strb	r2, [r3, #0]
			state |= END_ECHO;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e00c      	b.n	8000e36 <TIM3_IRQHandler+0xc2>
		}
		else
		{
			TIM3->SR &= ~TIM_SR_CC2IF;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000e22:	f023 0304 	bic.w	r3, r3, #4
 8000e26:	6113      	str	r3, [r2, #16]
			measured_time = TOO_FAR_TIMEOUT;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <TIM3_IRQHandler+0x10c>)
 8000e2a:	f247 5230 	movw	r2, #30000	; 0x7530
 8000e2e:	601a      	str	r2, [r3, #0]
			state = WTF2|END_ECHO;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e32:	2228      	movs	r2, #40	; 0x28
 8000e34:	701a      	strb	r2, [r3, #0]
		}

	}
	if( TIM3->SR & TIM_SR_UIF )
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d014      	beq.n	8000e6c <TIM3_IRQHandler+0xf8>
	{
		TIM3->SR &= ~TIM_SR_UIF;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <TIM3_IRQHandler+0x104>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6113      	str	r3, [r2, #16]
		if(state & START_ECHO)
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d007      	beq.n	8000e6c <TIM3_IRQHandler+0xf8>
		{
			state &= ~START_ECHO;
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f023 0307 	bic.w	r3, r3, #7
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <TIM3_IRQHandler+0x108>)
 8000e6a:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	20000098 	.word	0x20000098

08000e84 <get_measured_state>:

uint8_t 	get_measured_state(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	if(state & NEED_TRIG)
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <get_measured_state+0x74>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d013      	beq.n	8000ebe <get_measured_state+0x3a>
	{
		state |= WAIT_START_ECHO;
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <get_measured_state+0x74>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <get_measured_state+0x74>)
 8000ea4:	701a      	strb	r2, [r3, #0]
		state &= ~NEED_TRIG;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <get_measured_state+0x74>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <get_measured_state+0x74>)
 8000eb4:	701a      	strb	r2, [r3, #0]
		TIM1_start();
 8000eb6:	f7ff fed1 	bl	8000c5c <TIM1_start>
		return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e019      	b.n	8000ef2 <get_measured_state+0x6e>
	}
	if(state & END_ECHO)
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <get_measured_state+0x74>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d011      	beq.n	8000ef0 <get_measured_state+0x6c>
	{
		state 	&= ~END_ECHO;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <get_measured_state+0x74>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f023 030f 	bic.w	r3, r3, #15
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <get_measured_state+0x74>)
 8000eda:	701a      	strb	r2, [r3, #0]
		measured_time	=	measured_time/58;
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <get_measured_state+0x78>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <get_measured_state+0x7c>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <get_measured_state+0x78>)
 8000eea:	6013      	str	r3, [r2, #0]
		return 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <get_measured_state+0x6e>
	}
	return 1;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	20000098 	.word	0x20000098
 8000f00:	8d3dcb09 	.word	0x8d3dcb09

08000f04 <get_distance_sm>:

uint32_t	get_distance_sm(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	state |= NEED_TRIG;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <get_distance_sm+0x24>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <get_distance_sm+0x24>)
 8000f16:	701a      	strb	r2, [r3, #0]
	return measured_time;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <get_distance_sm+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000094 	.word	0x20000094
 8000f2c:	20000098 	.word	0x20000098

08000f30 <init_timers_hc_sr04>:

void init_timers_hc_sr04(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	init_trig();
 8000f34:	f7ff feb4 	bl	8000ca0 <init_trig>
	init_echo();
 8000f38:	f7ff fee4 	bl	8000d04 <init_echo>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <init_i2c1>:
#include "i2c_periph.h"

I2C_InitTypeDef	i2c1;

void	init_i2c1(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	I2C1->CR1	|=	I2C_CR1_SWRST;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <init_i2c1+0x5c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <init_i2c1+0x5c>)
 8000f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4e:	6013      	str	r3, [r2, #0]
	I2C1->CR1	&=	~I2C_CR1_SWRST;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <init_i2c1+0x5c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <init_i2c1+0x5c>)
 8000f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000f5a:	6013      	str	r3, [r2, #0]

	i2c1.I2C_Mode	=	I2C_Mode_I2C;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <init_i2c1+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	809a      	strh	r2, [r3, #4]
	i2c1.I2C_OwnAddress1	=	0;
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <init_i2c1+0x60>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	811a      	strh	r2, [r3, #8]
	i2c1.I2C_DutyCycle	=	I2C_DutyCycle_2;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <init_i2c1+0x60>)
 8000f6a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000f6e:	80da      	strh	r2, [r3, #6]
	i2c1.I2C_ClockSpeed	=	100000;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <init_i2c1+0x60>)
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <init_i2c1+0x64>)
 8000f74:	601a      	str	r2, [r3, #0]
	i2c1.I2C_AcknowledgedAddress	=	I2C_AcknowledgedAddress_7bit;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <init_i2c1+0x60>)
 8000f78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7c:	819a      	strh	r2, [r3, #12]

	I2C_Init(I2C1, &i2c1);
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <init_i2c1+0x60>)
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <init_i2c1+0x5c>)
 8000f82:	f7ff fa5d 	bl	8000440 <I2C_Init>
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8000f86:	2101      	movs	r1, #1
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <init_i2c1+0x5c>)
 8000f8a:	f7ff fb38 	bl	80005fe <I2C_AcknowledgeConfig>
	I2C_Cmd(I2C1, ENABLE);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <init_i2c1+0x5c>)
 8000f92:	f7ff fb17 	bl	80005c4 <I2C_Cmd>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	200000a8 	.word	0x200000a8
 8000fa4:	000186a0 	.word	0x000186a0

08000fa8 <i2c1_start>:

void	i2c1_start(uint8_t address)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	 /*!< While the bus is busy */
	while(I2C1->SR2 & I2C_SR2_BUSY);
 8000fb2:	bf00      	nop
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <i2c1_start+0x5c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f9      	bne.n	8000fb4 <i2c1_start+0xc>
	/* Start the config sequence */
	I2C1->CR1 |= I2C_CR1_START;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <i2c1_start+0x5c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <i2c1_start+0x5c>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB));
 8000fcc:	bf00      	nop
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <i2c1_start+0x5c>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <i2c1_start+0x26>

	I2C1->DR	=	(address<<1);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	005a      	lsls	r2, r3, #1
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <i2c1_start+0x5c>)
 8000fe0:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000fe2:	bf00      	nop
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <i2c1_start+0x5c>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f9      	beq.n	8000fe4 <i2c1_start+0x3c>
	(void)(I2C1->SR1|I2C1->SR2);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <i2c1_start+0x5c>)
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <i2c1_start+0x5c>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40005400 	.word	0x40005400

08001008 <i2c1_send>:

void	i2c1_send(uint8_t* data, uint8_t size, uint8_t address)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	70bb      	strb	r3, [r7, #2]
	i2c1_start(address);
 8001018:	78bb      	ldrb	r3, [r7, #2]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ffc4 	bl	8000fa8 <i2c1_start>
	while(size--)
 8001020:	e014      	b.n	800104c <i2c1_send+0x44>
	{
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8001022:	bf00      	nop
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <i2c1_send+0x64>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f9      	beq.n	8001024 <i2c1_send+0x1c>
		I2C1->DR	=	*data;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <i2c1_send+0x64>)
 8001036:	611a      	str	r2, [r3, #16]
		data++;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
		while(!(I2C1->SR1 & I2C_SR1_BTF));
 800103e:	bf00      	nop
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <i2c1_send+0x64>)
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f9      	beq.n	8001040 <i2c1_send+0x38>
	while(size--)
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	1e5a      	subs	r2, r3, #1
 8001050:	70fa      	strb	r2, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1e5      	bne.n	8001022 <i2c1_send+0x1a>
	}
	I2C1->CR1	|=	I2C_CR1_STOP;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <i2c1_send+0x64>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <i2c1_send+0x64>)
 800105c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001060:	6013      	str	r3, [r2, #0]
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005400 	.word	0x40005400

08001070 <hc_sr04_print>:
		52,//0
		53,//1
};

void	hc_sr04_print(uint8_t address, uint16_t data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	80bb      	strh	r3, [r7, #4]
	lcd_cmd(0x01,address);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4619      	mov	r1, r3
 8001084:	2001      	movs	r0, #1
 8001086:	f000 f8a0 	bl	80011ca <lcd_cmd>
	Delay(LED_DELAY);
 800108a:	2005      	movs	r0, #5
 800108c:	f7ff fd38 	bl	8000b00 <Delay>
	lcd_print_simple(address,"Distance: ");
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4920      	ldr	r1, [pc, #128]	; (8001114 <hc_sr04_print+0xa4>)
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f843 	bl	8001120 <lcd_print_simple>
	lcd_data((data/100)+48,address);
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <hc_sr04_print+0xa8>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f89c 	bl	80011ee <lcd_data>
	lcd_data(((data%100)/10)+48,address);
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <hc_sr04_print+0xa8>)
 80010ba:	fba2 1203 	umull	r1, r2, r2, r3
 80010be:	0952      	lsrs	r2, r2, #5
 80010c0:	2164      	movs	r1, #100	; 0x64
 80010c2:	fb01 f202 	mul.w	r2, r1, r2
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <hc_sr04_print+0xac>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	08db      	lsrs	r3, r3, #3
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3330      	adds	r3, #48	; 0x30
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	4611      	mov	r1, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f885 	bl	80011ee <lcd_data>
	lcd_data((data%10)+48,address);
 80010e4:	88ba      	ldrh	r2, [r7, #4]
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <hc_sr04_print+0xac>)
 80010e8:	fba3 1302 	umull	r1, r3, r3, r2
 80010ec:	08d9      	lsrs	r1, r3, #3
 80010ee:	460b      	mov	r3, r1
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	3330      	adds	r3, #48	; 0x30
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f872 	bl	80011ee <lcd_data>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	0800243c 	.word	0x0800243c
 8001118:	51eb851f 	.word	0x51eb851f
 800111c:	cccccccd 	.word	0xcccccccd

08001120 <lcd_print_simple>:

void lcd_print_simple(uint8_t address, uint8_t* data)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
	while(*data)
 800112c:	e009      	b.n	8001142 <lcd_print_simple+0x22>
	{
		lcd_data(*data,address);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f859 	bl	80011ee <lcd_data>
		data++;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	603b      	str	r3, [r7, #0]
	while(*data)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f1      	bne.n	800112e <lcd_print_simple+0xe>
	}
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <lcd_send>:
        str++;
    }
}

void	lcd_send(uint8_t data, uint8_t address, uint8_t flags)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
 800115e:	460b      	mov	r3, r1
 8001160:	71bb      	strb	r3, [r7, #6]
 8001162:	4613      	mov	r3, r2
 8001164:	717b      	strb	r3, [r7, #5]
	uint8_t arr_data[4];
	uint8_t up = (data & 0xF0);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f023 030f 	bic.w	r3, r3, #15
 800116c:	73fb      	strb	r3, [r7, #15]
	uint8_t lo = (data << 4) & 0xF0;;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	73bb      	strb	r3, [r7, #14]

	arr_data[0] = up|flags|BACKLIGHT|PIN_EN;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	797b      	ldrb	r3, [r7, #5]
 8001178:	4313      	orrs	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 030c 	orr.w	r3, r3, #12
 8001180:	b2db      	uxtb	r3, r3
 8001182:	723b      	strb	r3, [r7, #8]
	arr_data[1] = up|flags|BACKLIGHT;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	4313      	orrs	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	b2db      	uxtb	r3, r3
 8001192:	727b      	strb	r3, [r7, #9]
	arr_data[2] = lo|flags|BACKLIGHT|PIN_EN;
 8001194:	7bba      	ldrb	r2, [r7, #14]
 8001196:	797b      	ldrb	r3, [r7, #5]
 8001198:	4313      	orrs	r3, r2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 030c 	orr.w	r3, r3, #12
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	72bb      	strb	r3, [r7, #10]
	arr_data[3] = lo|flags|BACKLIGHT;
 80011a4:	7bba      	ldrb	r2, [r7, #14]
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	72fb      	strb	r3, [r7, #11]

	i2c1_send(arr_data, sizeof(arr_data), address);
 80011b4:	79ba      	ldrb	r2, [r7, #6]
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	2104      	movs	r1, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff23 	bl	8001008 <i2c1_send>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <lcd_cmd>:

void	lcd_cmd(uint8_t cmd, uint8_t address)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	460a      	mov	r2, r1
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71bb      	strb	r3, [r7, #6]
	lcd_send(cmd, address, 0);
 80011da:	79b9      	ldrb	r1, [r7, #6]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2200      	movs	r2, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffb7 	bl	8001154 <lcd_send>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <lcd_data>:

void	lcd_data(uint8_t data, uint8_t address)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	460a      	mov	r2, r1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	4613      	mov	r3, r2
 80011fc:	71bb      	strb	r3, [r7, #6]
	lcd_send(data, address, PIN_RS);
 80011fe:	79b9      	ldrb	r1, [r7, #6]
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2201      	movs	r2, #1
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffa5 	bl	8001154 <lcd_send>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <init_lcd1602>:

void	init_lcd1602(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
	init_i2c1_gpio();
 8001216:	f7ff fcb5 	bl	8000b84 <init_i2c1_gpio>
	init_i2c1();
 800121a:	f7ff fe91 	bl	8000f40 <init_i2c1>
	Delay(50);
 800121e:	2032      	movs	r0, #50	; 0x32
 8001220:	f7ff fc6e 	bl	8000b00 <Delay>
	lcd_cmd(0x30,PCF8574_ADDRESS);
 8001224:	2127      	movs	r1, #39	; 0x27
 8001226:	2030      	movs	r0, #48	; 0x30
 8001228:	f7ff ffcf 	bl	80011ca <lcd_cmd>
	Delay(50);
 800122c:	2032      	movs	r0, #50	; 0x32
 800122e:	f7ff fc67 	bl	8000b00 <Delay>
	lcd_cmd(0x02,PCF8574_ADDRESS);
 8001232:	2127      	movs	r1, #39	; 0x27
 8001234:	2002      	movs	r0, #2
 8001236:	f7ff ffc8 	bl	80011ca <lcd_cmd>
	Delay(50);
 800123a:	2032      	movs	r0, #50	; 0x32
 800123c:	f7ff fc60 	bl	8000b00 <Delay>
	lcd_cmd(0x0F,PCF8574_ADDRESS);
 8001240:	2127      	movs	r1, #39	; 0x27
 8001242:	200f      	movs	r0, #15
 8001244:	f7ff ffc1 	bl	80011ca <lcd_cmd>
	Delay(50);
 8001248:	2032      	movs	r0, #50	; 0x32
 800124a:	f7ff fc59 	bl	8000b00 <Delay>
	lcd_cmd(0x01,PCF8574_ADDRESS);
 800124e:	2127      	movs	r1, #39	; 0x27
 8001250:	2001      	movs	r0, #1
 8001252:	f7ff ffba 	bl	80011ca <lcd_cmd>
	Delay(50);
 8001256:	2032      	movs	r0, #50	; 0x32
 8001258:	f7ff fc52 	bl	8000b00 <Delay>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <main>:
#include "main.h"


int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	init_delay();
 8001266:	f7ff fc63 	bl	8000b30 <init_delay>
	init_uart1();
 800126a:	f000 f8d1 	bl	8001410 <init_uart1>

	init_lcd1602();
 800126e:	f7ff ffd0 	bl	8001212 <init_lcd1602>
	init_hc_sr04();
 8001272:	f7ff fd03 	bl	8000c7c <init_hc_sr04>
	uint32_t data = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if(get_measured_state())
 800127a:	f7ff fe03 	bl	8000e84 <get_measured_state>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <main+0x3e>
		{
			data = get_distance_sm();
 8001284:	f7ff fe3e 	bl	8000f04 <get_distance_sm>
 8001288:	6078      	str	r0, [r7, #4]
			hc_sr04_print(PCF8574_ADDRESS, data);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29b      	uxth	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	2027      	movs	r0, #39	; 0x27
 8001292:	f7ff feed 	bl	8001070 <hc_sr04_print>
			printf("%d\r\n",data);
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <main+0x48>)
 800129a:	f000 f96d 	bl	8001578 <iprintf>
		}
		Delay(100);
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f7ff fc2e 	bl	8000b00 <Delay>
		if(get_measured_state())
 80012a4:	e7e9      	b.n	800127a <main+0x1a>
 80012a6:	bf00      	nop
 80012a8:	08002448 	.word	0x08002448

080012ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00a      	b.n	80012d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012be:	f3af 8000 	nop.w
 80012c2:	4601      	mov	r1, r0
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf0      	blt.n	80012be <_read+0x12>
	}

return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e009      	b.n	800130c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f877 	bl	80013f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf1      	blt.n	80012f8 <_write+0x12>
	}
	return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_close>:

int _close(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001346:	605a      	str	r2, [r3, #4]
	return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_isatty>:

int _isatty(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f000 f8ac 	bl	8001514 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20030000 	.word	0x20030000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	2000009c 	.word	0x2000009c
 80013f0:	200000c8 	.word	0x200000c8

080013f4 <__io_putchar>:
#include "terminal.h"

int __io_putchar(int ch)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	write_byte(ch);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f845 	bl	8001490 <write_byte>
	return ch;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <init_uart1>:

void	init_uart1(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	USART1_RX, USART1_TX;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001416:	2101      	movs	r1, #1
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff f9b1 	bl	8000780 <RCC_AHB1PeriphClockCmd>
	GPIO_PinAFConfig(GPIOA, 9, GPIO_AF_USART1);
 800141e:	2207      	movs	r2, #7
 8001420:	2109      	movs	r1, #9
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <init_uart1+0x78>)
 8001424:	f7fe ffc3 	bl	80003ae <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, 10, GPIO_AF_USART1);
 8001428:	2207      	movs	r2, #7
 800142a:	210a      	movs	r1, #10
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <init_uart1+0x78>)
 800142e:	f7fe ffbe 	bl	80003ae <GPIO_PinAFConfig>

	USART1_RX.GPIO_Mode	=	GPIO_Mode_AF;
 8001432:	2302      	movs	r3, #2
 8001434:	773b      	strb	r3, [r7, #28]
	USART1_RX.GPIO_Pin	=	USART1_RX_PIN;
 8001436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143a:	61bb      	str	r3, [r7, #24]
	USART1_TX.GPIO_Mode	=	GPIO_Mode_AF;
 800143c:	2302      	movs	r3, #2
 800143e:	753b      	strb	r3, [r7, #20]
	USART1_TX.GPIO_Pin	=	USART1_TX_PIN;
 8001440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001444:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOA,&USART1_RX);
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <init_uart1+0x78>)
 800144e:	f7fe ff1f 	bl	8000290 <GPIO_Init>
	GPIO_Init(GPIOA,&USART1_TX);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <init_uart1+0x78>)
 800145a:	f7fe ff19 	bl	8000290 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800145e:	2101      	movs	r1, #1
 8001460:	2010      	movs	r0, #16
 8001462:	f7ff f9cd 	bl	8000800 <RCC_APB2PeriphClockCmd>
	USART_InitTypeDef	Usart1_init;
	USART_StructInit(&Usart1_init);
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff faa5 	bl	80009b8 <USART_StructInit>
	USART_Init(USART1, &Usart1_init);
 800146e:	463b      	mov	r3, r7
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <init_uart1+0x7c>)
 8001474:	f7ff f9e4 	bl	8000840 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8001478:	2101      	movs	r1, #1
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <init_uart1+0x7c>)
 800147c:	f7ff fab9 	bl	80009f2 <USART_Cmd>
}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40020000 	.word	0x40020000
 800148c:	40011000 	.word	0x40011000

08001490 <write_byte>:
	while( !(USART1->SR & USART_SR_RXNE));
	*data = USART1->DR;
}

void	write_byte(uint8_t data)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
	while( !(USART1->SR & USART_SR_TXE) );
 800149a:	bf00      	nop
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <write_byte+0x2c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f9      	beq.n	800149c <write_byte+0xc>
	USART1->DR	= data;
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <write_byte+0x2c>)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	6053      	str	r3, [r2, #4]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40011000 	.word	0x40011000

080014c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014c0:	480d      	ldr	r0, [pc, #52]	; (80014f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopForever+0x6>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopForever+0xe>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopForever+0x16>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014ee:	f000 f817 	bl	8001520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f2:	f7ff feb5 	bl	8001260 <main>

080014f6 <LoopForever>:

LoopForever:
    b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   r0, =_estack
 80014f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001504:	080024f0 	.word	0x080024f0
  ldr r2, =_sbss
 8001508:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800150c:	200000c8 	.word	0x200000c8

08001510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>
	...

08001514 <__errno>:
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <__errno+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000010 	.word	0x20000010

08001520 <__libc_init_array>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4d0d      	ldr	r5, [pc, #52]	; (8001558 <__libc_init_array+0x38>)
 8001524:	4c0d      	ldr	r4, [pc, #52]	; (800155c <__libc_init_array+0x3c>)
 8001526:	1b64      	subs	r4, r4, r5
 8001528:	10a4      	asrs	r4, r4, #2
 800152a:	2600      	movs	r6, #0
 800152c:	42a6      	cmp	r6, r4
 800152e:	d109      	bne.n	8001544 <__libc_init_array+0x24>
 8001530:	4d0b      	ldr	r5, [pc, #44]	; (8001560 <__libc_init_array+0x40>)
 8001532:	4c0c      	ldr	r4, [pc, #48]	; (8001564 <__libc_init_array+0x44>)
 8001534:	f000 ff76 	bl	8002424 <_init>
 8001538:	1b64      	subs	r4, r4, r5
 800153a:	10a4      	asrs	r4, r4, #2
 800153c:	2600      	movs	r6, #0
 800153e:	42a6      	cmp	r6, r4
 8001540:	d105      	bne.n	800154e <__libc_init_array+0x2e>
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	f855 3b04 	ldr.w	r3, [r5], #4
 8001548:	4798      	blx	r3
 800154a:	3601      	adds	r6, #1
 800154c:	e7ee      	b.n	800152c <__libc_init_array+0xc>
 800154e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001552:	4798      	blx	r3
 8001554:	3601      	adds	r6, #1
 8001556:	e7f2      	b.n	800153e <__libc_init_array+0x1e>
 8001558:	080024e8 	.word	0x080024e8
 800155c:	080024e8 	.word	0x080024e8
 8001560:	080024e8 	.word	0x080024e8
 8001564:	080024ec 	.word	0x080024ec

08001568 <memset>:
 8001568:	4402      	add	r2, r0
 800156a:	4603      	mov	r3, r0
 800156c:	4293      	cmp	r3, r2
 800156e:	d100      	bne.n	8001572 <memset+0xa>
 8001570:	4770      	bx	lr
 8001572:	f803 1b01 	strb.w	r1, [r3], #1
 8001576:	e7f9      	b.n	800156c <memset+0x4>

08001578 <iprintf>:
 8001578:	b40f      	push	{r0, r1, r2, r3}
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <iprintf+0x2c>)
 800157c:	b513      	push	{r0, r1, r4, lr}
 800157e:	681c      	ldr	r4, [r3, #0]
 8001580:	b124      	cbz	r4, 800158c <iprintf+0x14>
 8001582:	69a3      	ldr	r3, [r4, #24]
 8001584:	b913      	cbnz	r3, 800158c <iprintf+0x14>
 8001586:	4620      	mov	r0, r4
 8001588:	f000 f9e8 	bl	800195c <__sinit>
 800158c:	ab05      	add	r3, sp, #20
 800158e:	9a04      	ldr	r2, [sp, #16]
 8001590:	68a1      	ldr	r1, [r4, #8]
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	4620      	mov	r0, r4
 8001596:	f000 fbb9 	bl	8001d0c <_vfiprintf_r>
 800159a:	b002      	add	sp, #8
 800159c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015a0:	b004      	add	sp, #16
 80015a2:	4770      	bx	lr
 80015a4:	20000010 	.word	0x20000010

080015a8 <__swbuf_r>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	460e      	mov	r6, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	4605      	mov	r5, r0
 80015b0:	b118      	cbz	r0, 80015ba <__swbuf_r+0x12>
 80015b2:	6983      	ldr	r3, [r0, #24]
 80015b4:	b90b      	cbnz	r3, 80015ba <__swbuf_r+0x12>
 80015b6:	f000 f9d1 	bl	800195c <__sinit>
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <__swbuf_r+0x98>)
 80015bc:	429c      	cmp	r4, r3
 80015be:	d12b      	bne.n	8001618 <__swbuf_r+0x70>
 80015c0:	686c      	ldr	r4, [r5, #4]
 80015c2:	69a3      	ldr	r3, [r4, #24]
 80015c4:	60a3      	str	r3, [r4, #8]
 80015c6:	89a3      	ldrh	r3, [r4, #12]
 80015c8:	071a      	lsls	r2, r3, #28
 80015ca:	d52f      	bpl.n	800162c <__swbuf_r+0x84>
 80015cc:	6923      	ldr	r3, [r4, #16]
 80015ce:	b36b      	cbz	r3, 800162c <__swbuf_r+0x84>
 80015d0:	6923      	ldr	r3, [r4, #16]
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	1ac0      	subs	r0, r0, r3
 80015d6:	6963      	ldr	r3, [r4, #20]
 80015d8:	b2f6      	uxtb	r6, r6
 80015da:	4283      	cmp	r3, r0
 80015dc:	4637      	mov	r7, r6
 80015de:	dc04      	bgt.n	80015ea <__swbuf_r+0x42>
 80015e0:	4621      	mov	r1, r4
 80015e2:	4628      	mov	r0, r5
 80015e4:	f000 f926 	bl	8001834 <_fflush_r>
 80015e8:	bb30      	cbnz	r0, 8001638 <__swbuf_r+0x90>
 80015ea:	68a3      	ldr	r3, [r4, #8]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60a3      	str	r3, [r4, #8]
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	6022      	str	r2, [r4, #0]
 80015f6:	701e      	strb	r6, [r3, #0]
 80015f8:	6963      	ldr	r3, [r4, #20]
 80015fa:	3001      	adds	r0, #1
 80015fc:	4283      	cmp	r3, r0
 80015fe:	d004      	beq.n	800160a <__swbuf_r+0x62>
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	07db      	lsls	r3, r3, #31
 8001604:	d506      	bpl.n	8001614 <__swbuf_r+0x6c>
 8001606:	2e0a      	cmp	r6, #10
 8001608:	d104      	bne.n	8001614 <__swbuf_r+0x6c>
 800160a:	4621      	mov	r1, r4
 800160c:	4628      	mov	r0, r5
 800160e:	f000 f911 	bl	8001834 <_fflush_r>
 8001612:	b988      	cbnz	r0, 8001638 <__swbuf_r+0x90>
 8001614:	4638      	mov	r0, r7
 8001616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <__swbuf_r+0x9c>)
 800161a:	429c      	cmp	r4, r3
 800161c:	d101      	bne.n	8001622 <__swbuf_r+0x7a>
 800161e:	68ac      	ldr	r4, [r5, #8]
 8001620:	e7cf      	b.n	80015c2 <__swbuf_r+0x1a>
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <__swbuf_r+0xa0>)
 8001624:	429c      	cmp	r4, r3
 8001626:	bf08      	it	eq
 8001628:	68ec      	ldreq	r4, [r5, #12]
 800162a:	e7ca      	b.n	80015c2 <__swbuf_r+0x1a>
 800162c:	4621      	mov	r1, r4
 800162e:	4628      	mov	r0, r5
 8001630:	f000 f80c 	bl	800164c <__swsetup_r>
 8001634:	2800      	cmp	r0, #0
 8001636:	d0cb      	beq.n	80015d0 <__swbuf_r+0x28>
 8001638:	f04f 37ff 	mov.w	r7, #4294967295
 800163c:	e7ea      	b.n	8001614 <__swbuf_r+0x6c>
 800163e:	bf00      	nop
 8001640:	08002474 	.word	0x08002474
 8001644:	08002494 	.word	0x08002494
 8001648:	08002454 	.word	0x08002454

0800164c <__swsetup_r>:
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <__swsetup_r+0xcc>)
 800164e:	b570      	push	{r4, r5, r6, lr}
 8001650:	681d      	ldr	r5, [r3, #0]
 8001652:	4606      	mov	r6, r0
 8001654:	460c      	mov	r4, r1
 8001656:	b125      	cbz	r5, 8001662 <__swsetup_r+0x16>
 8001658:	69ab      	ldr	r3, [r5, #24]
 800165a:	b913      	cbnz	r3, 8001662 <__swsetup_r+0x16>
 800165c:	4628      	mov	r0, r5
 800165e:	f000 f97d 	bl	800195c <__sinit>
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <__swsetup_r+0xd0>)
 8001664:	429c      	cmp	r4, r3
 8001666:	d10f      	bne.n	8001688 <__swsetup_r+0x3c>
 8001668:	686c      	ldr	r4, [r5, #4]
 800166a:	89a3      	ldrh	r3, [r4, #12]
 800166c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001670:	0719      	lsls	r1, r3, #28
 8001672:	d42c      	bmi.n	80016ce <__swsetup_r+0x82>
 8001674:	06dd      	lsls	r5, r3, #27
 8001676:	d411      	bmi.n	800169c <__swsetup_r+0x50>
 8001678:	2309      	movs	r3, #9
 800167a:	6033      	str	r3, [r6, #0]
 800167c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001680:	81a3      	strh	r3, [r4, #12]
 8001682:	f04f 30ff 	mov.w	r0, #4294967295
 8001686:	e03e      	b.n	8001706 <__swsetup_r+0xba>
 8001688:	4b25      	ldr	r3, [pc, #148]	; (8001720 <__swsetup_r+0xd4>)
 800168a:	429c      	cmp	r4, r3
 800168c:	d101      	bne.n	8001692 <__swsetup_r+0x46>
 800168e:	68ac      	ldr	r4, [r5, #8]
 8001690:	e7eb      	b.n	800166a <__swsetup_r+0x1e>
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <__swsetup_r+0xd8>)
 8001694:	429c      	cmp	r4, r3
 8001696:	bf08      	it	eq
 8001698:	68ec      	ldreq	r4, [r5, #12]
 800169a:	e7e6      	b.n	800166a <__swsetup_r+0x1e>
 800169c:	0758      	lsls	r0, r3, #29
 800169e:	d512      	bpl.n	80016c6 <__swsetup_r+0x7a>
 80016a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016a2:	b141      	cbz	r1, 80016b6 <__swsetup_r+0x6a>
 80016a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d002      	beq.n	80016b2 <__swsetup_r+0x66>
 80016ac:	4630      	mov	r0, r6
 80016ae:	f000 fa59 	bl	8001b64 <_free_r>
 80016b2:	2300      	movs	r3, #0
 80016b4:	6363      	str	r3, [r4, #52]	; 0x34
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	2300      	movs	r3, #0
 80016c0:	6063      	str	r3, [r4, #4]
 80016c2:	6923      	ldr	r3, [r4, #16]
 80016c4:	6023      	str	r3, [r4, #0]
 80016c6:	89a3      	ldrh	r3, [r4, #12]
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	81a3      	strh	r3, [r4, #12]
 80016ce:	6923      	ldr	r3, [r4, #16]
 80016d0:	b94b      	cbnz	r3, 80016e6 <__swsetup_r+0x9a>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016dc:	d003      	beq.n	80016e6 <__swsetup_r+0x9a>
 80016de:	4621      	mov	r1, r4
 80016e0:	4630      	mov	r0, r6
 80016e2:	f000 f9ff 	bl	8001ae4 <__smakebuf_r>
 80016e6:	89a0      	ldrh	r0, [r4, #12]
 80016e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016ec:	f010 0301 	ands.w	r3, r0, #1
 80016f0:	d00a      	beq.n	8001708 <__swsetup_r+0xbc>
 80016f2:	2300      	movs	r3, #0
 80016f4:	60a3      	str	r3, [r4, #8]
 80016f6:	6963      	ldr	r3, [r4, #20]
 80016f8:	425b      	negs	r3, r3
 80016fa:	61a3      	str	r3, [r4, #24]
 80016fc:	6923      	ldr	r3, [r4, #16]
 80016fe:	b943      	cbnz	r3, 8001712 <__swsetup_r+0xc6>
 8001700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001704:	d1ba      	bne.n	800167c <__swsetup_r+0x30>
 8001706:	bd70      	pop	{r4, r5, r6, pc}
 8001708:	0781      	lsls	r1, r0, #30
 800170a:	bf58      	it	pl
 800170c:	6963      	ldrpl	r3, [r4, #20]
 800170e:	60a3      	str	r3, [r4, #8]
 8001710:	e7f4      	b.n	80016fc <__swsetup_r+0xb0>
 8001712:	2000      	movs	r0, #0
 8001714:	e7f7      	b.n	8001706 <__swsetup_r+0xba>
 8001716:	bf00      	nop
 8001718:	20000010 	.word	0x20000010
 800171c:	08002474 	.word	0x08002474
 8001720:	08002494 	.word	0x08002494
 8001724:	08002454 	.word	0x08002454

08001728 <__sflush_r>:
 8001728:	898a      	ldrh	r2, [r1, #12]
 800172a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172e:	4605      	mov	r5, r0
 8001730:	0710      	lsls	r0, r2, #28
 8001732:	460c      	mov	r4, r1
 8001734:	d458      	bmi.n	80017e8 <__sflush_r+0xc0>
 8001736:	684b      	ldr	r3, [r1, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dc05      	bgt.n	8001748 <__sflush_r+0x20>
 800173c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc02      	bgt.n	8001748 <__sflush_r+0x20>
 8001742:	2000      	movs	r0, #0
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800174a:	2e00      	cmp	r6, #0
 800174c:	d0f9      	beq.n	8001742 <__sflush_r+0x1a>
 800174e:	2300      	movs	r3, #0
 8001750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001754:	682f      	ldr	r7, [r5, #0]
 8001756:	602b      	str	r3, [r5, #0]
 8001758:	d032      	beq.n	80017c0 <__sflush_r+0x98>
 800175a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800175c:	89a3      	ldrh	r3, [r4, #12]
 800175e:	075a      	lsls	r2, r3, #29
 8001760:	d505      	bpl.n	800176e <__sflush_r+0x46>
 8001762:	6863      	ldr	r3, [r4, #4]
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001768:	b10b      	cbz	r3, 800176e <__sflush_r+0x46>
 800176a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800176c:	1ac0      	subs	r0, r0, r3
 800176e:	2300      	movs	r3, #0
 8001770:	4602      	mov	r2, r0
 8001772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001774:	6a21      	ldr	r1, [r4, #32]
 8001776:	4628      	mov	r0, r5
 8001778:	47b0      	blx	r6
 800177a:	1c43      	adds	r3, r0, #1
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	d106      	bne.n	800178e <__sflush_r+0x66>
 8001780:	6829      	ldr	r1, [r5, #0]
 8001782:	291d      	cmp	r1, #29
 8001784:	d82c      	bhi.n	80017e0 <__sflush_r+0xb8>
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <__sflush_r+0x108>)
 8001788:	40ca      	lsrs	r2, r1
 800178a:	07d6      	lsls	r6, r2, #31
 800178c:	d528      	bpl.n	80017e0 <__sflush_r+0xb8>
 800178e:	2200      	movs	r2, #0
 8001790:	6062      	str	r2, [r4, #4]
 8001792:	04d9      	lsls	r1, r3, #19
 8001794:	6922      	ldr	r2, [r4, #16]
 8001796:	6022      	str	r2, [r4, #0]
 8001798:	d504      	bpl.n	80017a4 <__sflush_r+0x7c>
 800179a:	1c42      	adds	r2, r0, #1
 800179c:	d101      	bne.n	80017a2 <__sflush_r+0x7a>
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	b903      	cbnz	r3, 80017a4 <__sflush_r+0x7c>
 80017a2:	6560      	str	r0, [r4, #84]	; 0x54
 80017a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017a6:	602f      	str	r7, [r5, #0]
 80017a8:	2900      	cmp	r1, #0
 80017aa:	d0ca      	beq.n	8001742 <__sflush_r+0x1a>
 80017ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017b0:	4299      	cmp	r1, r3
 80017b2:	d002      	beq.n	80017ba <__sflush_r+0x92>
 80017b4:	4628      	mov	r0, r5
 80017b6:	f000 f9d5 	bl	8001b64 <_free_r>
 80017ba:	2000      	movs	r0, #0
 80017bc:	6360      	str	r0, [r4, #52]	; 0x34
 80017be:	e7c1      	b.n	8001744 <__sflush_r+0x1c>
 80017c0:	6a21      	ldr	r1, [r4, #32]
 80017c2:	2301      	movs	r3, #1
 80017c4:	4628      	mov	r0, r5
 80017c6:	47b0      	blx	r6
 80017c8:	1c41      	adds	r1, r0, #1
 80017ca:	d1c7      	bne.n	800175c <__sflush_r+0x34>
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0c4      	beq.n	800175c <__sflush_r+0x34>
 80017d2:	2b1d      	cmp	r3, #29
 80017d4:	d001      	beq.n	80017da <__sflush_r+0xb2>
 80017d6:	2b16      	cmp	r3, #22
 80017d8:	d101      	bne.n	80017de <__sflush_r+0xb6>
 80017da:	602f      	str	r7, [r5, #0]
 80017dc:	e7b1      	b.n	8001742 <__sflush_r+0x1a>
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e4:	81a3      	strh	r3, [r4, #12]
 80017e6:	e7ad      	b.n	8001744 <__sflush_r+0x1c>
 80017e8:	690f      	ldr	r7, [r1, #16]
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d0a9      	beq.n	8001742 <__sflush_r+0x1a>
 80017ee:	0793      	lsls	r3, r2, #30
 80017f0:	680e      	ldr	r6, [r1, #0]
 80017f2:	bf08      	it	eq
 80017f4:	694b      	ldreq	r3, [r1, #20]
 80017f6:	600f      	str	r7, [r1, #0]
 80017f8:	bf18      	it	ne
 80017fa:	2300      	movne	r3, #0
 80017fc:	eba6 0807 	sub.w	r8, r6, r7
 8001800:	608b      	str	r3, [r1, #8]
 8001802:	f1b8 0f00 	cmp.w	r8, #0
 8001806:	dd9c      	ble.n	8001742 <__sflush_r+0x1a>
 8001808:	6a21      	ldr	r1, [r4, #32]
 800180a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800180c:	4643      	mov	r3, r8
 800180e:	463a      	mov	r2, r7
 8001810:	4628      	mov	r0, r5
 8001812:	47b0      	blx	r6
 8001814:	2800      	cmp	r0, #0
 8001816:	dc06      	bgt.n	8001826 <__sflush_r+0xfe>
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181e:	81a3      	strh	r3, [r4, #12]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	e78e      	b.n	8001744 <__sflush_r+0x1c>
 8001826:	4407      	add	r7, r0
 8001828:	eba8 0800 	sub.w	r8, r8, r0
 800182c:	e7e9      	b.n	8001802 <__sflush_r+0xda>
 800182e:	bf00      	nop
 8001830:	20400001 	.word	0x20400001

08001834 <_fflush_r>:
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	690b      	ldr	r3, [r1, #16]
 8001838:	4605      	mov	r5, r0
 800183a:	460c      	mov	r4, r1
 800183c:	b913      	cbnz	r3, 8001844 <_fflush_r+0x10>
 800183e:	2500      	movs	r5, #0
 8001840:	4628      	mov	r0, r5
 8001842:	bd38      	pop	{r3, r4, r5, pc}
 8001844:	b118      	cbz	r0, 800184e <_fflush_r+0x1a>
 8001846:	6983      	ldr	r3, [r0, #24]
 8001848:	b90b      	cbnz	r3, 800184e <_fflush_r+0x1a>
 800184a:	f000 f887 	bl	800195c <__sinit>
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <_fflush_r+0x6c>)
 8001850:	429c      	cmp	r4, r3
 8001852:	d11b      	bne.n	800188c <_fflush_r+0x58>
 8001854:	686c      	ldr	r4, [r5, #4]
 8001856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ef      	beq.n	800183e <_fflush_r+0xa>
 800185e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001860:	07d0      	lsls	r0, r2, #31
 8001862:	d404      	bmi.n	800186e <_fflush_r+0x3a>
 8001864:	0599      	lsls	r1, r3, #22
 8001866:	d402      	bmi.n	800186e <_fflush_r+0x3a>
 8001868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800186a:	f000 f915 	bl	8001a98 <__retarget_lock_acquire_recursive>
 800186e:	4628      	mov	r0, r5
 8001870:	4621      	mov	r1, r4
 8001872:	f7ff ff59 	bl	8001728 <__sflush_r>
 8001876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001878:	07da      	lsls	r2, r3, #31
 800187a:	4605      	mov	r5, r0
 800187c:	d4e0      	bmi.n	8001840 <_fflush_r+0xc>
 800187e:	89a3      	ldrh	r3, [r4, #12]
 8001880:	059b      	lsls	r3, r3, #22
 8001882:	d4dd      	bmi.n	8001840 <_fflush_r+0xc>
 8001884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001886:	f000 f908 	bl	8001a9a <__retarget_lock_release_recursive>
 800188a:	e7d9      	b.n	8001840 <_fflush_r+0xc>
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <_fflush_r+0x70>)
 800188e:	429c      	cmp	r4, r3
 8001890:	d101      	bne.n	8001896 <_fflush_r+0x62>
 8001892:	68ac      	ldr	r4, [r5, #8]
 8001894:	e7df      	b.n	8001856 <_fflush_r+0x22>
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <_fflush_r+0x74>)
 8001898:	429c      	cmp	r4, r3
 800189a:	bf08      	it	eq
 800189c:	68ec      	ldreq	r4, [r5, #12]
 800189e:	e7da      	b.n	8001856 <_fflush_r+0x22>
 80018a0:	08002474 	.word	0x08002474
 80018a4:	08002494 	.word	0x08002494
 80018a8:	08002454 	.word	0x08002454

080018ac <std>:
 80018ac:	2300      	movs	r3, #0
 80018ae:	b510      	push	{r4, lr}
 80018b0:	4604      	mov	r4, r0
 80018b2:	e9c0 3300 	strd	r3, r3, [r0]
 80018b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80018ba:	6083      	str	r3, [r0, #8]
 80018bc:	8181      	strh	r1, [r0, #12]
 80018be:	6643      	str	r3, [r0, #100]	; 0x64
 80018c0:	81c2      	strh	r2, [r0, #14]
 80018c2:	6183      	str	r3, [r0, #24]
 80018c4:	4619      	mov	r1, r3
 80018c6:	2208      	movs	r2, #8
 80018c8:	305c      	adds	r0, #92	; 0x5c
 80018ca:	f7ff fe4d 	bl	8001568 <memset>
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <std+0x38>)
 80018d0:	6263      	str	r3, [r4, #36]	; 0x24
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <std+0x3c>)
 80018d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <std+0x40>)
 80018d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <std+0x44>)
 80018dc:	6224      	str	r4, [r4, #32]
 80018de:	6323      	str	r3, [r4, #48]	; 0x30
 80018e0:	bd10      	pop	{r4, pc}
 80018e2:	bf00      	nop
 80018e4:	080022b5 	.word	0x080022b5
 80018e8:	080022d7 	.word	0x080022d7
 80018ec:	0800230f 	.word	0x0800230f
 80018f0:	08002333 	.word	0x08002333

080018f4 <_cleanup_r>:
 80018f4:	4901      	ldr	r1, [pc, #4]	; (80018fc <_cleanup_r+0x8>)
 80018f6:	f000 b8af 	b.w	8001a58 <_fwalk_reent>
 80018fa:	bf00      	nop
 80018fc:	08001835 	.word	0x08001835

08001900 <__sfmoreglue>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	1e4a      	subs	r2, r1, #1
 8001904:	2568      	movs	r5, #104	; 0x68
 8001906:	4355      	muls	r5, r2
 8001908:	460e      	mov	r6, r1
 800190a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800190e:	f000 f979 	bl	8001c04 <_malloc_r>
 8001912:	4604      	mov	r4, r0
 8001914:	b140      	cbz	r0, 8001928 <__sfmoreglue+0x28>
 8001916:	2100      	movs	r1, #0
 8001918:	e9c0 1600 	strd	r1, r6, [r0]
 800191c:	300c      	adds	r0, #12
 800191e:	60a0      	str	r0, [r4, #8]
 8001920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001924:	f7ff fe20 	bl	8001568 <memset>
 8001928:	4620      	mov	r0, r4
 800192a:	bd70      	pop	{r4, r5, r6, pc}

0800192c <__sfp_lock_acquire>:
 800192c:	4801      	ldr	r0, [pc, #4]	; (8001934 <__sfp_lock_acquire+0x8>)
 800192e:	f000 b8b3 	b.w	8001a98 <__retarget_lock_acquire_recursive>
 8001932:	bf00      	nop
 8001934:	200000c0 	.word	0x200000c0

08001938 <__sfp_lock_release>:
 8001938:	4801      	ldr	r0, [pc, #4]	; (8001940 <__sfp_lock_release+0x8>)
 800193a:	f000 b8ae 	b.w	8001a9a <__retarget_lock_release_recursive>
 800193e:	bf00      	nop
 8001940:	200000c0 	.word	0x200000c0

08001944 <__sinit_lock_acquire>:
 8001944:	4801      	ldr	r0, [pc, #4]	; (800194c <__sinit_lock_acquire+0x8>)
 8001946:	f000 b8a7 	b.w	8001a98 <__retarget_lock_acquire_recursive>
 800194a:	bf00      	nop
 800194c:	200000bb 	.word	0x200000bb

08001950 <__sinit_lock_release>:
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <__sinit_lock_release+0x8>)
 8001952:	f000 b8a2 	b.w	8001a9a <__retarget_lock_release_recursive>
 8001956:	bf00      	nop
 8001958:	200000bb 	.word	0x200000bb

0800195c <__sinit>:
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
 8001960:	f7ff fff0 	bl	8001944 <__sinit_lock_acquire>
 8001964:	69a3      	ldr	r3, [r4, #24]
 8001966:	b11b      	cbz	r3, 8001970 <__sinit+0x14>
 8001968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800196c:	f7ff bff0 	b.w	8001950 <__sinit_lock_release>
 8001970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001974:	6523      	str	r3, [r4, #80]	; 0x50
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <__sinit+0x68>)
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <__sinit+0x6c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	62a2      	str	r2, [r4, #40]	; 0x28
 800197e:	42a3      	cmp	r3, r4
 8001980:	bf04      	itt	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	61a3      	streq	r3, [r4, #24]
 8001986:	4620      	mov	r0, r4
 8001988:	f000 f820 	bl	80019cc <__sfp>
 800198c:	6060      	str	r0, [r4, #4]
 800198e:	4620      	mov	r0, r4
 8001990:	f000 f81c 	bl	80019cc <__sfp>
 8001994:	60a0      	str	r0, [r4, #8]
 8001996:	4620      	mov	r0, r4
 8001998:	f000 f818 	bl	80019cc <__sfp>
 800199c:	2200      	movs	r2, #0
 800199e:	60e0      	str	r0, [r4, #12]
 80019a0:	2104      	movs	r1, #4
 80019a2:	6860      	ldr	r0, [r4, #4]
 80019a4:	f7ff ff82 	bl	80018ac <std>
 80019a8:	68a0      	ldr	r0, [r4, #8]
 80019aa:	2201      	movs	r2, #1
 80019ac:	2109      	movs	r1, #9
 80019ae:	f7ff ff7d 	bl	80018ac <std>
 80019b2:	68e0      	ldr	r0, [r4, #12]
 80019b4:	2202      	movs	r2, #2
 80019b6:	2112      	movs	r1, #18
 80019b8:	f7ff ff78 	bl	80018ac <std>
 80019bc:	2301      	movs	r3, #1
 80019be:	61a3      	str	r3, [r4, #24]
 80019c0:	e7d2      	b.n	8001968 <__sinit+0xc>
 80019c2:	bf00      	nop
 80019c4:	08002450 	.word	0x08002450
 80019c8:	080018f5 	.word	0x080018f5

080019cc <__sfp>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	4607      	mov	r7, r0
 80019d0:	f7ff ffac 	bl	800192c <__sfp_lock_acquire>
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <__sfp+0x84>)
 80019d6:	681e      	ldr	r6, [r3, #0]
 80019d8:	69b3      	ldr	r3, [r6, #24]
 80019da:	b913      	cbnz	r3, 80019e2 <__sfp+0x16>
 80019dc:	4630      	mov	r0, r6
 80019de:	f7ff ffbd 	bl	800195c <__sinit>
 80019e2:	3648      	adds	r6, #72	; 0x48
 80019e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	d503      	bpl.n	80019f4 <__sfp+0x28>
 80019ec:	6833      	ldr	r3, [r6, #0]
 80019ee:	b30b      	cbz	r3, 8001a34 <__sfp+0x68>
 80019f0:	6836      	ldr	r6, [r6, #0]
 80019f2:	e7f7      	b.n	80019e4 <__sfp+0x18>
 80019f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019f8:	b9d5      	cbnz	r5, 8001a30 <__sfp+0x64>
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <__sfp+0x88>)
 80019fc:	60e3      	str	r3, [r4, #12]
 80019fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a02:	6665      	str	r5, [r4, #100]	; 0x64
 8001a04:	f000 f847 	bl	8001a96 <__retarget_lock_init_recursive>
 8001a08:	f7ff ff96 	bl	8001938 <__sfp_lock_release>
 8001a0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a14:	6025      	str	r5, [r4, #0]
 8001a16:	61a5      	str	r5, [r4, #24]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a20:	f7ff fda2 	bl	8001568 <memset>
 8001a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a30:	3468      	adds	r4, #104	; 0x68
 8001a32:	e7d9      	b.n	80019e8 <__sfp+0x1c>
 8001a34:	2104      	movs	r1, #4
 8001a36:	4638      	mov	r0, r7
 8001a38:	f7ff ff62 	bl	8001900 <__sfmoreglue>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	6030      	str	r0, [r6, #0]
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d1d5      	bne.n	80019f0 <__sfp+0x24>
 8001a44:	f7ff ff78 	bl	8001938 <__sfp_lock_release>
 8001a48:	230c      	movs	r3, #12
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	e7ee      	b.n	8001a2c <__sfp+0x60>
 8001a4e:	bf00      	nop
 8001a50:	08002450 	.word	0x08002450
 8001a54:	ffff0001 	.word	0xffff0001

08001a58 <_fwalk_reent>:
 8001a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a5c:	4606      	mov	r6, r0
 8001a5e:	4688      	mov	r8, r1
 8001a60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a64:	2700      	movs	r7, #0
 8001a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8001a6e:	d505      	bpl.n	8001a7c <_fwalk_reent+0x24>
 8001a70:	6824      	ldr	r4, [r4, #0]
 8001a72:	2c00      	cmp	r4, #0
 8001a74:	d1f7      	bne.n	8001a66 <_fwalk_reent+0xe>
 8001a76:	4638      	mov	r0, r7
 8001a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a7c:	89ab      	ldrh	r3, [r5, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d907      	bls.n	8001a92 <_fwalk_reent+0x3a>
 8001a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a86:	3301      	adds	r3, #1
 8001a88:	d003      	beq.n	8001a92 <_fwalk_reent+0x3a>
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	47c0      	blx	r8
 8001a90:	4307      	orrs	r7, r0
 8001a92:	3568      	adds	r5, #104	; 0x68
 8001a94:	e7e9      	b.n	8001a6a <_fwalk_reent+0x12>

08001a96 <__retarget_lock_init_recursive>:
 8001a96:	4770      	bx	lr

08001a98 <__retarget_lock_acquire_recursive>:
 8001a98:	4770      	bx	lr

08001a9a <__retarget_lock_release_recursive>:
 8001a9a:	4770      	bx	lr

08001a9c <__swhatbuf_r>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	460e      	mov	r6, r1
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	da07      	bge.n	8001abe <__swhatbuf_r+0x22>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	89b3      	ldrh	r3, [r6, #12]
 8001ab4:	061a      	lsls	r2, r3, #24
 8001ab6:	d410      	bmi.n	8001ada <__swhatbuf_r+0x3e>
 8001ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abc:	e00e      	b.n	8001adc <__swhatbuf_r+0x40>
 8001abe:	466a      	mov	r2, sp
 8001ac0:	f000 fc5e 	bl	8002380 <_fstat_r>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	dbf2      	blt.n	8001aae <__swhatbuf_r+0x12>
 8001ac8:	9a01      	ldr	r2, [sp, #4]
 8001aca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ad2:	425a      	negs	r2, r3
 8001ad4:	415a      	adcs	r2, r3
 8001ad6:	602a      	str	r2, [r5, #0]
 8001ad8:	e7ee      	b.n	8001ab8 <__swhatbuf_r+0x1c>
 8001ada:	2340      	movs	r3, #64	; 0x40
 8001adc:	2000      	movs	r0, #0
 8001ade:	6023      	str	r3, [r4, #0]
 8001ae0:	b016      	add	sp, #88	; 0x58
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}

08001ae4 <__smakebuf_r>:
 8001ae4:	898b      	ldrh	r3, [r1, #12]
 8001ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ae8:	079d      	lsls	r5, r3, #30
 8001aea:	4606      	mov	r6, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	d507      	bpl.n	8001b00 <__smakebuf_r+0x1c>
 8001af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	6123      	str	r3, [r4, #16]
 8001af8:	2301      	movs	r3, #1
 8001afa:	6163      	str	r3, [r4, #20]
 8001afc:	b002      	add	sp, #8
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	466a      	mov	r2, sp
 8001b04:	f7ff ffca 	bl	8001a9c <__swhatbuf_r>
 8001b08:	9900      	ldr	r1, [sp, #0]
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 f879 	bl	8001c04 <_malloc_r>
 8001b12:	b948      	cbnz	r0, 8001b28 <__smakebuf_r+0x44>
 8001b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b18:	059a      	lsls	r2, r3, #22
 8001b1a:	d4ef      	bmi.n	8001afc <__smakebuf_r+0x18>
 8001b1c:	f023 0303 	bic.w	r3, r3, #3
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	81a3      	strh	r3, [r4, #12]
 8001b26:	e7e3      	b.n	8001af0 <__smakebuf_r+0xc>
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <__smakebuf_r+0x7c>)
 8001b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	81a3      	strh	r3, [r4, #12]
 8001b36:	9b00      	ldr	r3, [sp, #0]
 8001b38:	6163      	str	r3, [r4, #20]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	6120      	str	r0, [r4, #16]
 8001b3e:	b15b      	cbz	r3, 8001b58 <__smakebuf_r+0x74>
 8001b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 fc2d 	bl	80023a4 <_isatty_r>
 8001b4a:	b128      	cbz	r0, 8001b58 <__smakebuf_r+0x74>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	89a0      	ldrh	r0, [r4, #12]
 8001b5a:	4305      	orrs	r5, r0
 8001b5c:	81a5      	strh	r5, [r4, #12]
 8001b5e:	e7cd      	b.n	8001afc <__smakebuf_r+0x18>
 8001b60:	080018f5 	.word	0x080018f5

08001b64 <_free_r>:
 8001b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b66:	2900      	cmp	r1, #0
 8001b68:	d048      	beq.n	8001bfc <_free_r+0x98>
 8001b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b6e:	9001      	str	r0, [sp, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f1a1 0404 	sub.w	r4, r1, #4
 8001b76:	bfb8      	it	lt
 8001b78:	18e4      	addlt	r4, r4, r3
 8001b7a:	f000 fc35 	bl	80023e8 <__malloc_lock>
 8001b7e:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <_free_r+0x9c>)
 8001b80:	9801      	ldr	r0, [sp, #4]
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	4615      	mov	r5, r2
 8001b86:	b933      	cbnz	r3, 8001b96 <_free_r+0x32>
 8001b88:	6063      	str	r3, [r4, #4]
 8001b8a:	6014      	str	r4, [r2, #0]
 8001b8c:	b003      	add	sp, #12
 8001b8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b92:	f000 bc2f 	b.w	80023f4 <__malloc_unlock>
 8001b96:	42a3      	cmp	r3, r4
 8001b98:	d90b      	bls.n	8001bb2 <_free_r+0x4e>
 8001b9a:	6821      	ldr	r1, [r4, #0]
 8001b9c:	1862      	adds	r2, r4, r1
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	bf04      	itt	eq
 8001ba2:	681a      	ldreq	r2, [r3, #0]
 8001ba4:	685b      	ldreq	r3, [r3, #4]
 8001ba6:	6063      	str	r3, [r4, #4]
 8001ba8:	bf04      	itt	eq
 8001baa:	1852      	addeq	r2, r2, r1
 8001bac:	6022      	streq	r2, [r4, #0]
 8001bae:	602c      	str	r4, [r5, #0]
 8001bb0:	e7ec      	b.n	8001b8c <_free_r+0x28>
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	b10b      	cbz	r3, 8001bbc <_free_r+0x58>
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d9fa      	bls.n	8001bb2 <_free_r+0x4e>
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	1855      	adds	r5, r2, r1
 8001bc0:	42a5      	cmp	r5, r4
 8001bc2:	d10b      	bne.n	8001bdc <_free_r+0x78>
 8001bc4:	6824      	ldr	r4, [r4, #0]
 8001bc6:	4421      	add	r1, r4
 8001bc8:	1854      	adds	r4, r2, r1
 8001bca:	42a3      	cmp	r3, r4
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	d1dd      	bne.n	8001b8c <_free_r+0x28>
 8001bd0:	681c      	ldr	r4, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	6053      	str	r3, [r2, #4]
 8001bd6:	4421      	add	r1, r4
 8001bd8:	6011      	str	r1, [r2, #0]
 8001bda:	e7d7      	b.n	8001b8c <_free_r+0x28>
 8001bdc:	d902      	bls.n	8001be4 <_free_r+0x80>
 8001bde:	230c      	movs	r3, #12
 8001be0:	6003      	str	r3, [r0, #0]
 8001be2:	e7d3      	b.n	8001b8c <_free_r+0x28>
 8001be4:	6825      	ldr	r5, [r4, #0]
 8001be6:	1961      	adds	r1, r4, r5
 8001be8:	428b      	cmp	r3, r1
 8001bea:	bf04      	itt	eq
 8001bec:	6819      	ldreq	r1, [r3, #0]
 8001bee:	685b      	ldreq	r3, [r3, #4]
 8001bf0:	6063      	str	r3, [r4, #4]
 8001bf2:	bf04      	itt	eq
 8001bf4:	1949      	addeq	r1, r1, r5
 8001bf6:	6021      	streq	r1, [r4, #0]
 8001bf8:	6054      	str	r4, [r2, #4]
 8001bfa:	e7c7      	b.n	8001b8c <_free_r+0x28>
 8001bfc:	b003      	add	sp, #12
 8001bfe:	bd30      	pop	{r4, r5, pc}
 8001c00:	200000a0 	.word	0x200000a0

08001c04 <_malloc_r>:
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	1ccd      	adds	r5, r1, #3
 8001c08:	f025 0503 	bic.w	r5, r5, #3
 8001c0c:	3508      	adds	r5, #8
 8001c0e:	2d0c      	cmp	r5, #12
 8001c10:	bf38      	it	cc
 8001c12:	250c      	movcc	r5, #12
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	4606      	mov	r6, r0
 8001c18:	db01      	blt.n	8001c1e <_malloc_r+0x1a>
 8001c1a:	42a9      	cmp	r1, r5
 8001c1c:	d903      	bls.n	8001c26 <_malloc_r+0x22>
 8001c1e:	230c      	movs	r3, #12
 8001c20:	6033      	str	r3, [r6, #0]
 8001c22:	2000      	movs	r0, #0
 8001c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c26:	f000 fbdf 	bl	80023e8 <__malloc_lock>
 8001c2a:	4921      	ldr	r1, [pc, #132]	; (8001cb0 <_malloc_r+0xac>)
 8001c2c:	680a      	ldr	r2, [r1, #0]
 8001c2e:	4614      	mov	r4, r2
 8001c30:	b99c      	cbnz	r4, 8001c5a <_malloc_r+0x56>
 8001c32:	4f20      	ldr	r7, [pc, #128]	; (8001cb4 <_malloc_r+0xb0>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b923      	cbnz	r3, 8001c42 <_malloc_r+0x3e>
 8001c38:	4621      	mov	r1, r4
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f000 fb2a 	bl	8002294 <_sbrk_r>
 8001c40:	6038      	str	r0, [r7, #0]
 8001c42:	4629      	mov	r1, r5
 8001c44:	4630      	mov	r0, r6
 8001c46:	f000 fb25 	bl	8002294 <_sbrk_r>
 8001c4a:	1c43      	adds	r3, r0, #1
 8001c4c:	d123      	bne.n	8001c96 <_malloc_r+0x92>
 8001c4e:	230c      	movs	r3, #12
 8001c50:	6033      	str	r3, [r6, #0]
 8001c52:	4630      	mov	r0, r6
 8001c54:	f000 fbce 	bl	80023f4 <__malloc_unlock>
 8001c58:	e7e3      	b.n	8001c22 <_malloc_r+0x1e>
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	1b5b      	subs	r3, r3, r5
 8001c5e:	d417      	bmi.n	8001c90 <_malloc_r+0x8c>
 8001c60:	2b0b      	cmp	r3, #11
 8001c62:	d903      	bls.n	8001c6c <_malloc_r+0x68>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	441c      	add	r4, r3
 8001c68:	6025      	str	r5, [r4, #0]
 8001c6a:	e004      	b.n	8001c76 <_malloc_r+0x72>
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	42a2      	cmp	r2, r4
 8001c70:	bf0c      	ite	eq
 8001c72:	600b      	streq	r3, [r1, #0]
 8001c74:	6053      	strne	r3, [r2, #4]
 8001c76:	4630      	mov	r0, r6
 8001c78:	f000 fbbc 	bl	80023f4 <__malloc_unlock>
 8001c7c:	f104 000b 	add.w	r0, r4, #11
 8001c80:	1d23      	adds	r3, r4, #4
 8001c82:	f020 0007 	bic.w	r0, r0, #7
 8001c86:	1ac2      	subs	r2, r0, r3
 8001c88:	d0cc      	beq.n	8001c24 <_malloc_r+0x20>
 8001c8a:	1a1b      	subs	r3, r3, r0
 8001c8c:	50a3      	str	r3, [r4, r2]
 8001c8e:	e7c9      	b.n	8001c24 <_malloc_r+0x20>
 8001c90:	4622      	mov	r2, r4
 8001c92:	6864      	ldr	r4, [r4, #4]
 8001c94:	e7cc      	b.n	8001c30 <_malloc_r+0x2c>
 8001c96:	1cc4      	adds	r4, r0, #3
 8001c98:	f024 0403 	bic.w	r4, r4, #3
 8001c9c:	42a0      	cmp	r0, r4
 8001c9e:	d0e3      	beq.n	8001c68 <_malloc_r+0x64>
 8001ca0:	1a21      	subs	r1, r4, r0
 8001ca2:	4630      	mov	r0, r6
 8001ca4:	f000 faf6 	bl	8002294 <_sbrk_r>
 8001ca8:	3001      	adds	r0, #1
 8001caa:	d1dd      	bne.n	8001c68 <_malloc_r+0x64>
 8001cac:	e7cf      	b.n	8001c4e <_malloc_r+0x4a>
 8001cae:	bf00      	nop
 8001cb0:	200000a0 	.word	0x200000a0
 8001cb4:	200000a4 	.word	0x200000a4

08001cb8 <__sfputc_r>:
 8001cb8:	6893      	ldr	r3, [r2, #8]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	b410      	push	{r4}
 8001cc0:	6093      	str	r3, [r2, #8]
 8001cc2:	da08      	bge.n	8001cd6 <__sfputc_r+0x1e>
 8001cc4:	6994      	ldr	r4, [r2, #24]
 8001cc6:	42a3      	cmp	r3, r4
 8001cc8:	db01      	blt.n	8001cce <__sfputc_r+0x16>
 8001cca:	290a      	cmp	r1, #10
 8001ccc:	d103      	bne.n	8001cd6 <__sfputc_r+0x1e>
 8001cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cd2:	f7ff bc69 	b.w	80015a8 <__swbuf_r>
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	1c58      	adds	r0, r3, #1
 8001cda:	6010      	str	r0, [r2, #0]
 8001cdc:	7019      	strb	r1, [r3, #0]
 8001cde:	4608      	mov	r0, r1
 8001ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <__sfputs_r>:
 8001ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce8:	4606      	mov	r6, r0
 8001cea:	460f      	mov	r7, r1
 8001cec:	4614      	mov	r4, r2
 8001cee:	18d5      	adds	r5, r2, r3
 8001cf0:	42ac      	cmp	r4, r5
 8001cf2:	d101      	bne.n	8001cf8 <__sfputs_r+0x12>
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	e007      	b.n	8001d08 <__sfputs_r+0x22>
 8001cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cfc:	463a      	mov	r2, r7
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f7ff ffda 	bl	8001cb8 <__sfputc_r>
 8001d04:	1c43      	adds	r3, r0, #1
 8001d06:	d1f3      	bne.n	8001cf0 <__sfputs_r+0xa>
 8001d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d0c <_vfiprintf_r>:
 8001d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d10:	460d      	mov	r5, r1
 8001d12:	b09d      	sub	sp, #116	; 0x74
 8001d14:	4614      	mov	r4, r2
 8001d16:	4698      	mov	r8, r3
 8001d18:	4606      	mov	r6, r0
 8001d1a:	b118      	cbz	r0, 8001d24 <_vfiprintf_r+0x18>
 8001d1c:	6983      	ldr	r3, [r0, #24]
 8001d1e:	b90b      	cbnz	r3, 8001d24 <_vfiprintf_r+0x18>
 8001d20:	f7ff fe1c 	bl	800195c <__sinit>
 8001d24:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <_vfiprintf_r+0x240>)
 8001d26:	429d      	cmp	r5, r3
 8001d28:	d11b      	bne.n	8001d62 <_vfiprintf_r+0x56>
 8001d2a:	6875      	ldr	r5, [r6, #4]
 8001d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d2e:	07d9      	lsls	r1, r3, #31
 8001d30:	d405      	bmi.n	8001d3e <_vfiprintf_r+0x32>
 8001d32:	89ab      	ldrh	r3, [r5, #12]
 8001d34:	059a      	lsls	r2, r3, #22
 8001d36:	d402      	bmi.n	8001d3e <_vfiprintf_r+0x32>
 8001d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d3a:	f7ff fead 	bl	8001a98 <__retarget_lock_acquire_recursive>
 8001d3e:	89ab      	ldrh	r3, [r5, #12]
 8001d40:	071b      	lsls	r3, r3, #28
 8001d42:	d501      	bpl.n	8001d48 <_vfiprintf_r+0x3c>
 8001d44:	692b      	ldr	r3, [r5, #16]
 8001d46:	b9eb      	cbnz	r3, 8001d84 <_vfiprintf_r+0x78>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f7ff fc7e 	bl	800164c <__swsetup_r>
 8001d50:	b1c0      	cbz	r0, 8001d84 <_vfiprintf_r+0x78>
 8001d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d54:	07dc      	lsls	r4, r3, #31
 8001d56:	d50e      	bpl.n	8001d76 <_vfiprintf_r+0x6a>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	b01d      	add	sp, #116	; 0x74
 8001d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d62:	4b7b      	ldr	r3, [pc, #492]	; (8001f50 <_vfiprintf_r+0x244>)
 8001d64:	429d      	cmp	r5, r3
 8001d66:	d101      	bne.n	8001d6c <_vfiprintf_r+0x60>
 8001d68:	68b5      	ldr	r5, [r6, #8]
 8001d6a:	e7df      	b.n	8001d2c <_vfiprintf_r+0x20>
 8001d6c:	4b79      	ldr	r3, [pc, #484]	; (8001f54 <_vfiprintf_r+0x248>)
 8001d6e:	429d      	cmp	r5, r3
 8001d70:	bf08      	it	eq
 8001d72:	68f5      	ldreq	r5, [r6, #12]
 8001d74:	e7da      	b.n	8001d2c <_vfiprintf_r+0x20>
 8001d76:	89ab      	ldrh	r3, [r5, #12]
 8001d78:	0598      	lsls	r0, r3, #22
 8001d7a:	d4ed      	bmi.n	8001d58 <_vfiprintf_r+0x4c>
 8001d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d7e:	f7ff fe8c 	bl	8001a9a <__retarget_lock_release_recursive>
 8001d82:	e7e9      	b.n	8001d58 <_vfiprintf_r+0x4c>
 8001d84:	2300      	movs	r3, #0
 8001d86:	9309      	str	r3, [sp, #36]	; 0x24
 8001d88:	2320      	movs	r3, #32
 8001d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d92:	2330      	movs	r3, #48	; 0x30
 8001d94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001f58 <_vfiprintf_r+0x24c>
 8001d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d9c:	f04f 0901 	mov.w	r9, #1
 8001da0:	4623      	mov	r3, r4
 8001da2:	469a      	mov	sl, r3
 8001da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001da8:	b10a      	cbz	r2, 8001dae <_vfiprintf_r+0xa2>
 8001daa:	2a25      	cmp	r2, #37	; 0x25
 8001dac:	d1f9      	bne.n	8001da2 <_vfiprintf_r+0x96>
 8001dae:	ebba 0b04 	subs.w	fp, sl, r4
 8001db2:	d00b      	beq.n	8001dcc <_vfiprintf_r+0xc0>
 8001db4:	465b      	mov	r3, fp
 8001db6:	4622      	mov	r2, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f7ff ff93 	bl	8001ce6 <__sfputs_r>
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	f000 80aa 	beq.w	8001f1a <_vfiprintf_r+0x20e>
 8001dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001dc8:	445a      	add	r2, fp
 8001dca:	9209      	str	r2, [sp, #36]	; 0x24
 8001dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a2 	beq.w	8001f1a <_vfiprintf_r+0x20e>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de0:	f10a 0a01 	add.w	sl, sl, #1
 8001de4:	9304      	str	r3, [sp, #16]
 8001de6:	9307      	str	r3, [sp, #28]
 8001de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dec:	931a      	str	r3, [sp, #104]	; 0x68
 8001dee:	4654      	mov	r4, sl
 8001df0:	2205      	movs	r2, #5
 8001df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001df6:	4858      	ldr	r0, [pc, #352]	; (8001f58 <_vfiprintf_r+0x24c>)
 8001df8:	f7fe f9fa 	bl	80001f0 <memchr>
 8001dfc:	9a04      	ldr	r2, [sp, #16]
 8001dfe:	b9d8      	cbnz	r0, 8001e38 <_vfiprintf_r+0x12c>
 8001e00:	06d1      	lsls	r1, r2, #27
 8001e02:	bf44      	itt	mi
 8001e04:	2320      	movmi	r3, #32
 8001e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e0a:	0713      	lsls	r3, r2, #28
 8001e0c:	bf44      	itt	mi
 8001e0e:	232b      	movmi	r3, #43	; 0x2b
 8001e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e14:	f89a 3000 	ldrb.w	r3, [sl]
 8001e18:	2b2a      	cmp	r3, #42	; 0x2a
 8001e1a:	d015      	beq.n	8001e48 <_vfiprintf_r+0x13c>
 8001e1c:	9a07      	ldr	r2, [sp, #28]
 8001e1e:	4654      	mov	r4, sl
 8001e20:	2000      	movs	r0, #0
 8001e22:	f04f 0c0a 	mov.w	ip, #10
 8001e26:	4621      	mov	r1, r4
 8001e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e2c:	3b30      	subs	r3, #48	; 0x30
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d94e      	bls.n	8001ed0 <_vfiprintf_r+0x1c4>
 8001e32:	b1b0      	cbz	r0, 8001e62 <_vfiprintf_r+0x156>
 8001e34:	9207      	str	r2, [sp, #28]
 8001e36:	e014      	b.n	8001e62 <_vfiprintf_r+0x156>
 8001e38:	eba0 0308 	sub.w	r3, r0, r8
 8001e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	9304      	str	r3, [sp, #16]
 8001e44:	46a2      	mov	sl, r4
 8001e46:	e7d2      	b.n	8001dee <_vfiprintf_r+0xe2>
 8001e48:	9b03      	ldr	r3, [sp, #12]
 8001e4a:	1d19      	adds	r1, r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	9103      	str	r1, [sp, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bfbb      	ittet	lt
 8001e54:	425b      	neglt	r3, r3
 8001e56:	f042 0202 	orrlt.w	r2, r2, #2
 8001e5a:	9307      	strge	r3, [sp, #28]
 8001e5c:	9307      	strlt	r3, [sp, #28]
 8001e5e:	bfb8      	it	lt
 8001e60:	9204      	strlt	r2, [sp, #16]
 8001e62:	7823      	ldrb	r3, [r4, #0]
 8001e64:	2b2e      	cmp	r3, #46	; 0x2e
 8001e66:	d10c      	bne.n	8001e82 <_vfiprintf_r+0x176>
 8001e68:	7863      	ldrb	r3, [r4, #1]
 8001e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e6c:	d135      	bne.n	8001eda <_vfiprintf_r+0x1ce>
 8001e6e:	9b03      	ldr	r3, [sp, #12]
 8001e70:	1d1a      	adds	r2, r3, #4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	9203      	str	r2, [sp, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bfb8      	it	lt
 8001e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e7e:	3402      	adds	r4, #2
 8001e80:	9305      	str	r3, [sp, #20]
 8001e82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001f68 <_vfiprintf_r+0x25c>
 8001e86:	7821      	ldrb	r1, [r4, #0]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	f7fe f9b0 	bl	80001f0 <memchr>
 8001e90:	b140      	cbz	r0, 8001ea4 <_vfiprintf_r+0x198>
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	eba0 000a 	sub.w	r0, r0, sl
 8001e98:	fa03 f000 	lsl.w	r0, r3, r0
 8001e9c:	9b04      	ldr	r3, [sp, #16]
 8001e9e:	4303      	orrs	r3, r0
 8001ea0:	3401      	adds	r4, #1
 8001ea2:	9304      	str	r3, [sp, #16]
 8001ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea8:	482c      	ldr	r0, [pc, #176]	; (8001f5c <_vfiprintf_r+0x250>)
 8001eaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001eae:	2206      	movs	r2, #6
 8001eb0:	f7fe f99e 	bl	80001f0 <memchr>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d03f      	beq.n	8001f38 <_vfiprintf_r+0x22c>
 8001eb8:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <_vfiprintf_r+0x254>)
 8001eba:	bb1b      	cbnz	r3, 8001f04 <_vfiprintf_r+0x1f8>
 8001ebc:	9b03      	ldr	r3, [sp, #12]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	f023 0307 	bic.w	r3, r3, #7
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	9303      	str	r3, [sp, #12]
 8001ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eca:	443b      	add	r3, r7
 8001ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8001ece:	e767      	b.n	8001da0 <_vfiprintf_r+0x94>
 8001ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	e7a5      	b.n	8001e26 <_vfiprintf_r+0x11a>
 8001eda:	2300      	movs	r3, #0
 8001edc:	3401      	adds	r4, #1
 8001ede:	9305      	str	r3, [sp, #20]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 0c0a 	mov.w	ip, #10
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eec:	3a30      	subs	r2, #48	; 0x30
 8001eee:	2a09      	cmp	r2, #9
 8001ef0:	d903      	bls.n	8001efa <_vfiprintf_r+0x1ee>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0c5      	beq.n	8001e82 <_vfiprintf_r+0x176>
 8001ef6:	9105      	str	r1, [sp, #20]
 8001ef8:	e7c3      	b.n	8001e82 <_vfiprintf_r+0x176>
 8001efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8001efe:	4604      	mov	r4, r0
 8001f00:	2301      	movs	r3, #1
 8001f02:	e7f0      	b.n	8001ee6 <_vfiprintf_r+0x1da>
 8001f04:	ab03      	add	r3, sp, #12
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	462a      	mov	r2, r5
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <_vfiprintf_r+0x258>)
 8001f0c:	a904      	add	r1, sp, #16
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f3af 8000 	nop.w
 8001f14:	4607      	mov	r7, r0
 8001f16:	1c78      	adds	r0, r7, #1
 8001f18:	d1d6      	bne.n	8001ec8 <_vfiprintf_r+0x1bc>
 8001f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f1c:	07d9      	lsls	r1, r3, #31
 8001f1e:	d405      	bmi.n	8001f2c <_vfiprintf_r+0x220>
 8001f20:	89ab      	ldrh	r3, [r5, #12]
 8001f22:	059a      	lsls	r2, r3, #22
 8001f24:	d402      	bmi.n	8001f2c <_vfiprintf_r+0x220>
 8001f26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f28:	f7ff fdb7 	bl	8001a9a <__retarget_lock_release_recursive>
 8001f2c:	89ab      	ldrh	r3, [r5, #12]
 8001f2e:	065b      	lsls	r3, r3, #25
 8001f30:	f53f af12 	bmi.w	8001d58 <_vfiprintf_r+0x4c>
 8001f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f36:	e711      	b.n	8001d5c <_vfiprintf_r+0x50>
 8001f38:	ab03      	add	r3, sp, #12
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <_vfiprintf_r+0x258>)
 8001f40:	a904      	add	r1, sp, #16
 8001f42:	4630      	mov	r0, r6
 8001f44:	f000 f880 	bl	8002048 <_printf_i>
 8001f48:	e7e4      	b.n	8001f14 <_vfiprintf_r+0x208>
 8001f4a:	bf00      	nop
 8001f4c:	08002474 	.word	0x08002474
 8001f50:	08002494 	.word	0x08002494
 8001f54:	08002454 	.word	0x08002454
 8001f58:	080024b4 	.word	0x080024b4
 8001f5c:	080024be 	.word	0x080024be
 8001f60:	00000000 	.word	0x00000000
 8001f64:	08001ce7 	.word	0x08001ce7
 8001f68:	080024ba 	.word	0x080024ba

08001f6c <_printf_common>:
 8001f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f70:	4616      	mov	r6, r2
 8001f72:	4699      	mov	r9, r3
 8001f74:	688a      	ldr	r2, [r1, #8]
 8001f76:	690b      	ldr	r3, [r1, #16]
 8001f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	bfb8      	it	lt
 8001f80:	4613      	movlt	r3, r2
 8001f82:	6033      	str	r3, [r6, #0]
 8001f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f88:	4607      	mov	r7, r0
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	b10a      	cbz	r2, 8001f92 <_printf_common+0x26>
 8001f8e:	3301      	adds	r3, #1
 8001f90:	6033      	str	r3, [r6, #0]
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	0699      	lsls	r1, r3, #26
 8001f96:	bf42      	ittt	mi
 8001f98:	6833      	ldrmi	r3, [r6, #0]
 8001f9a:	3302      	addmi	r3, #2
 8001f9c:	6033      	strmi	r3, [r6, #0]
 8001f9e:	6825      	ldr	r5, [r4, #0]
 8001fa0:	f015 0506 	ands.w	r5, r5, #6
 8001fa4:	d106      	bne.n	8001fb4 <_printf_common+0x48>
 8001fa6:	f104 0a19 	add.w	sl, r4, #25
 8001faa:	68e3      	ldr	r3, [r4, #12]
 8001fac:	6832      	ldr	r2, [r6, #0]
 8001fae:	1a9b      	subs	r3, r3, r2
 8001fb0:	42ab      	cmp	r3, r5
 8001fb2:	dc26      	bgt.n	8002002 <_printf_common+0x96>
 8001fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001fb8:	1e13      	subs	r3, r2, #0
 8001fba:	6822      	ldr	r2, [r4, #0]
 8001fbc:	bf18      	it	ne
 8001fbe:	2301      	movne	r3, #1
 8001fc0:	0692      	lsls	r2, r2, #26
 8001fc2:	d42b      	bmi.n	800201c <_printf_common+0xb0>
 8001fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fc8:	4649      	mov	r1, r9
 8001fca:	4638      	mov	r0, r7
 8001fcc:	47c0      	blx	r8
 8001fce:	3001      	adds	r0, #1
 8001fd0:	d01e      	beq.n	8002010 <_printf_common+0xa4>
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	68e5      	ldr	r5, [r4, #12]
 8001fd6:	6832      	ldr	r2, [r6, #0]
 8001fd8:	f003 0306 	and.w	r3, r3, #6
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	bf08      	it	eq
 8001fe0:	1aad      	subeq	r5, r5, r2
 8001fe2:	68a3      	ldr	r3, [r4, #8]
 8001fe4:	6922      	ldr	r2, [r4, #16]
 8001fe6:	bf0c      	ite	eq
 8001fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fec:	2500      	movne	r5, #0
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	bfc4      	itt	gt
 8001ff2:	1a9b      	subgt	r3, r3, r2
 8001ff4:	18ed      	addgt	r5, r5, r3
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	341a      	adds	r4, #26
 8001ffa:	42b5      	cmp	r5, r6
 8001ffc:	d11a      	bne.n	8002034 <_printf_common+0xc8>
 8001ffe:	2000      	movs	r0, #0
 8002000:	e008      	b.n	8002014 <_printf_common+0xa8>
 8002002:	2301      	movs	r3, #1
 8002004:	4652      	mov	r2, sl
 8002006:	4649      	mov	r1, r9
 8002008:	4638      	mov	r0, r7
 800200a:	47c0      	blx	r8
 800200c:	3001      	adds	r0, #1
 800200e:	d103      	bne.n	8002018 <_printf_common+0xac>
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002018:	3501      	adds	r5, #1
 800201a:	e7c6      	b.n	8001faa <_printf_common+0x3e>
 800201c:	18e1      	adds	r1, r4, r3
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	2030      	movs	r0, #48	; 0x30
 8002022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002026:	4422      	add	r2, r4
 8002028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800202c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002030:	3302      	adds	r3, #2
 8002032:	e7c7      	b.n	8001fc4 <_printf_common+0x58>
 8002034:	2301      	movs	r3, #1
 8002036:	4622      	mov	r2, r4
 8002038:	4649      	mov	r1, r9
 800203a:	4638      	mov	r0, r7
 800203c:	47c0      	blx	r8
 800203e:	3001      	adds	r0, #1
 8002040:	d0e6      	beq.n	8002010 <_printf_common+0xa4>
 8002042:	3601      	adds	r6, #1
 8002044:	e7d9      	b.n	8001ffa <_printf_common+0x8e>
	...

08002048 <_printf_i>:
 8002048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800204c:	460c      	mov	r4, r1
 800204e:	4691      	mov	r9, r2
 8002050:	7e27      	ldrb	r7, [r4, #24]
 8002052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002054:	2f78      	cmp	r7, #120	; 0x78
 8002056:	4680      	mov	r8, r0
 8002058:	469a      	mov	sl, r3
 800205a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800205e:	d807      	bhi.n	8002070 <_printf_i+0x28>
 8002060:	2f62      	cmp	r7, #98	; 0x62
 8002062:	d80a      	bhi.n	800207a <_printf_i+0x32>
 8002064:	2f00      	cmp	r7, #0
 8002066:	f000 80d8 	beq.w	800221a <_printf_i+0x1d2>
 800206a:	2f58      	cmp	r7, #88	; 0x58
 800206c:	f000 80a3 	beq.w	80021b6 <_printf_i+0x16e>
 8002070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002078:	e03a      	b.n	80020f0 <_printf_i+0xa8>
 800207a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800207e:	2b15      	cmp	r3, #21
 8002080:	d8f6      	bhi.n	8002070 <_printf_i+0x28>
 8002082:	a001      	add	r0, pc, #4	; (adr r0, 8002088 <_printf_i+0x40>)
 8002084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002088:	080020e1 	.word	0x080020e1
 800208c:	080020f5 	.word	0x080020f5
 8002090:	08002071 	.word	0x08002071
 8002094:	08002071 	.word	0x08002071
 8002098:	08002071 	.word	0x08002071
 800209c:	08002071 	.word	0x08002071
 80020a0:	080020f5 	.word	0x080020f5
 80020a4:	08002071 	.word	0x08002071
 80020a8:	08002071 	.word	0x08002071
 80020ac:	08002071 	.word	0x08002071
 80020b0:	08002071 	.word	0x08002071
 80020b4:	08002201 	.word	0x08002201
 80020b8:	08002125 	.word	0x08002125
 80020bc:	080021e3 	.word	0x080021e3
 80020c0:	08002071 	.word	0x08002071
 80020c4:	08002071 	.word	0x08002071
 80020c8:	08002223 	.word	0x08002223
 80020cc:	08002071 	.word	0x08002071
 80020d0:	08002125 	.word	0x08002125
 80020d4:	08002071 	.word	0x08002071
 80020d8:	08002071 	.word	0x08002071
 80020dc:	080021eb 	.word	0x080021eb
 80020e0:	680b      	ldr	r3, [r1, #0]
 80020e2:	1d1a      	adds	r2, r3, #4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	600a      	str	r2, [r1, #0]
 80020e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80020ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0a3      	b.n	800223c <_printf_i+0x1f4>
 80020f4:	6825      	ldr	r5, [r4, #0]
 80020f6:	6808      	ldr	r0, [r1, #0]
 80020f8:	062e      	lsls	r6, r5, #24
 80020fa:	f100 0304 	add.w	r3, r0, #4
 80020fe:	d50a      	bpl.n	8002116 <_printf_i+0xce>
 8002100:	6805      	ldr	r5, [r0, #0]
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	2d00      	cmp	r5, #0
 8002106:	da03      	bge.n	8002110 <_printf_i+0xc8>
 8002108:	232d      	movs	r3, #45	; 0x2d
 800210a:	426d      	negs	r5, r5
 800210c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002110:	485e      	ldr	r0, [pc, #376]	; (800228c <_printf_i+0x244>)
 8002112:	230a      	movs	r3, #10
 8002114:	e019      	b.n	800214a <_printf_i+0x102>
 8002116:	f015 0f40 	tst.w	r5, #64	; 0x40
 800211a:	6805      	ldr	r5, [r0, #0]
 800211c:	600b      	str	r3, [r1, #0]
 800211e:	bf18      	it	ne
 8002120:	b22d      	sxthne	r5, r5
 8002122:	e7ef      	b.n	8002104 <_printf_i+0xbc>
 8002124:	680b      	ldr	r3, [r1, #0]
 8002126:	6825      	ldr	r5, [r4, #0]
 8002128:	1d18      	adds	r0, r3, #4
 800212a:	6008      	str	r0, [r1, #0]
 800212c:	0628      	lsls	r0, r5, #24
 800212e:	d501      	bpl.n	8002134 <_printf_i+0xec>
 8002130:	681d      	ldr	r5, [r3, #0]
 8002132:	e002      	b.n	800213a <_printf_i+0xf2>
 8002134:	0669      	lsls	r1, r5, #25
 8002136:	d5fb      	bpl.n	8002130 <_printf_i+0xe8>
 8002138:	881d      	ldrh	r5, [r3, #0]
 800213a:	4854      	ldr	r0, [pc, #336]	; (800228c <_printf_i+0x244>)
 800213c:	2f6f      	cmp	r7, #111	; 0x6f
 800213e:	bf0c      	ite	eq
 8002140:	2308      	moveq	r3, #8
 8002142:	230a      	movne	r3, #10
 8002144:	2100      	movs	r1, #0
 8002146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800214a:	6866      	ldr	r6, [r4, #4]
 800214c:	60a6      	str	r6, [r4, #8]
 800214e:	2e00      	cmp	r6, #0
 8002150:	bfa2      	ittt	ge
 8002152:	6821      	ldrge	r1, [r4, #0]
 8002154:	f021 0104 	bicge.w	r1, r1, #4
 8002158:	6021      	strge	r1, [r4, #0]
 800215a:	b90d      	cbnz	r5, 8002160 <_printf_i+0x118>
 800215c:	2e00      	cmp	r6, #0
 800215e:	d04d      	beq.n	80021fc <_printf_i+0x1b4>
 8002160:	4616      	mov	r6, r2
 8002162:	fbb5 f1f3 	udiv	r1, r5, r3
 8002166:	fb03 5711 	mls	r7, r3, r1, r5
 800216a:	5dc7      	ldrb	r7, [r0, r7]
 800216c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002170:	462f      	mov	r7, r5
 8002172:	42bb      	cmp	r3, r7
 8002174:	460d      	mov	r5, r1
 8002176:	d9f4      	bls.n	8002162 <_printf_i+0x11a>
 8002178:	2b08      	cmp	r3, #8
 800217a:	d10b      	bne.n	8002194 <_printf_i+0x14c>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	07df      	lsls	r7, r3, #31
 8002180:	d508      	bpl.n	8002194 <_printf_i+0x14c>
 8002182:	6923      	ldr	r3, [r4, #16]
 8002184:	6861      	ldr	r1, [r4, #4]
 8002186:	4299      	cmp	r1, r3
 8002188:	bfde      	ittt	le
 800218a:	2330      	movle	r3, #48	; 0x30
 800218c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002194:	1b92      	subs	r2, r2, r6
 8002196:	6122      	str	r2, [r4, #16]
 8002198:	f8cd a000 	str.w	sl, [sp]
 800219c:	464b      	mov	r3, r9
 800219e:	aa03      	add	r2, sp, #12
 80021a0:	4621      	mov	r1, r4
 80021a2:	4640      	mov	r0, r8
 80021a4:	f7ff fee2 	bl	8001f6c <_printf_common>
 80021a8:	3001      	adds	r0, #1
 80021aa:	d14c      	bne.n	8002246 <_printf_i+0x1fe>
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	b004      	add	sp, #16
 80021b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b6:	4835      	ldr	r0, [pc, #212]	; (800228c <_printf_i+0x244>)
 80021b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	680e      	ldr	r6, [r1, #0]
 80021c0:	061f      	lsls	r7, r3, #24
 80021c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80021c6:	600e      	str	r6, [r1, #0]
 80021c8:	d514      	bpl.n	80021f4 <_printf_i+0x1ac>
 80021ca:	07d9      	lsls	r1, r3, #31
 80021cc:	bf44      	itt	mi
 80021ce:	f043 0320 	orrmi.w	r3, r3, #32
 80021d2:	6023      	strmi	r3, [r4, #0]
 80021d4:	b91d      	cbnz	r5, 80021de <_printf_i+0x196>
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	f023 0320 	bic.w	r3, r3, #32
 80021dc:	6023      	str	r3, [r4, #0]
 80021de:	2310      	movs	r3, #16
 80021e0:	e7b0      	b.n	8002144 <_printf_i+0xfc>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	f043 0320 	orr.w	r3, r3, #32
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	2378      	movs	r3, #120	; 0x78
 80021ec:	4828      	ldr	r0, [pc, #160]	; (8002290 <_printf_i+0x248>)
 80021ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80021f2:	e7e3      	b.n	80021bc <_printf_i+0x174>
 80021f4:	065e      	lsls	r6, r3, #25
 80021f6:	bf48      	it	mi
 80021f8:	b2ad      	uxthmi	r5, r5
 80021fa:	e7e6      	b.n	80021ca <_printf_i+0x182>
 80021fc:	4616      	mov	r6, r2
 80021fe:	e7bb      	b.n	8002178 <_printf_i+0x130>
 8002200:	680b      	ldr	r3, [r1, #0]
 8002202:	6826      	ldr	r6, [r4, #0]
 8002204:	6960      	ldr	r0, [r4, #20]
 8002206:	1d1d      	adds	r5, r3, #4
 8002208:	600d      	str	r5, [r1, #0]
 800220a:	0635      	lsls	r5, r6, #24
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	d501      	bpl.n	8002214 <_printf_i+0x1cc>
 8002210:	6018      	str	r0, [r3, #0]
 8002212:	e002      	b.n	800221a <_printf_i+0x1d2>
 8002214:	0671      	lsls	r1, r6, #25
 8002216:	d5fb      	bpl.n	8002210 <_printf_i+0x1c8>
 8002218:	8018      	strh	r0, [r3, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	6123      	str	r3, [r4, #16]
 800221e:	4616      	mov	r6, r2
 8002220:	e7ba      	b.n	8002198 <_printf_i+0x150>
 8002222:	680b      	ldr	r3, [r1, #0]
 8002224:	1d1a      	adds	r2, r3, #4
 8002226:	600a      	str	r2, [r1, #0]
 8002228:	681e      	ldr	r6, [r3, #0]
 800222a:	6862      	ldr	r2, [r4, #4]
 800222c:	2100      	movs	r1, #0
 800222e:	4630      	mov	r0, r6
 8002230:	f7fd ffde 	bl	80001f0 <memchr>
 8002234:	b108      	cbz	r0, 800223a <_printf_i+0x1f2>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	6060      	str	r0, [r4, #4]
 800223a:	6863      	ldr	r3, [r4, #4]
 800223c:	6123      	str	r3, [r4, #16]
 800223e:	2300      	movs	r3, #0
 8002240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002244:	e7a8      	b.n	8002198 <_printf_i+0x150>
 8002246:	6923      	ldr	r3, [r4, #16]
 8002248:	4632      	mov	r2, r6
 800224a:	4649      	mov	r1, r9
 800224c:	4640      	mov	r0, r8
 800224e:	47d0      	blx	sl
 8002250:	3001      	adds	r0, #1
 8002252:	d0ab      	beq.n	80021ac <_printf_i+0x164>
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	079b      	lsls	r3, r3, #30
 8002258:	d413      	bmi.n	8002282 <_printf_i+0x23a>
 800225a:	68e0      	ldr	r0, [r4, #12]
 800225c:	9b03      	ldr	r3, [sp, #12]
 800225e:	4298      	cmp	r0, r3
 8002260:	bfb8      	it	lt
 8002262:	4618      	movlt	r0, r3
 8002264:	e7a4      	b.n	80021b0 <_printf_i+0x168>
 8002266:	2301      	movs	r3, #1
 8002268:	4632      	mov	r2, r6
 800226a:	4649      	mov	r1, r9
 800226c:	4640      	mov	r0, r8
 800226e:	47d0      	blx	sl
 8002270:	3001      	adds	r0, #1
 8002272:	d09b      	beq.n	80021ac <_printf_i+0x164>
 8002274:	3501      	adds	r5, #1
 8002276:	68e3      	ldr	r3, [r4, #12]
 8002278:	9903      	ldr	r1, [sp, #12]
 800227a:	1a5b      	subs	r3, r3, r1
 800227c:	42ab      	cmp	r3, r5
 800227e:	dcf2      	bgt.n	8002266 <_printf_i+0x21e>
 8002280:	e7eb      	b.n	800225a <_printf_i+0x212>
 8002282:	2500      	movs	r5, #0
 8002284:	f104 0619 	add.w	r6, r4, #25
 8002288:	e7f5      	b.n	8002276 <_printf_i+0x22e>
 800228a:	bf00      	nop
 800228c:	080024c5 	.word	0x080024c5
 8002290:	080024d6 	.word	0x080024d6

08002294 <_sbrk_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4d06      	ldr	r5, [pc, #24]	; (80022b0 <_sbrk_r+0x1c>)
 8002298:	2300      	movs	r3, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	602b      	str	r3, [r5, #0]
 80022a0:	f7ff f872 	bl	8001388 <_sbrk>
 80022a4:	1c43      	adds	r3, r0, #1
 80022a6:	d102      	bne.n	80022ae <_sbrk_r+0x1a>
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	b103      	cbz	r3, 80022ae <_sbrk_r+0x1a>
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	bd38      	pop	{r3, r4, r5, pc}
 80022b0:	200000c4 	.word	0x200000c4

080022b4 <__sread>:
 80022b4:	b510      	push	{r4, lr}
 80022b6:	460c      	mov	r4, r1
 80022b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022bc:	f000 f8a0 	bl	8002400 <_read_r>
 80022c0:	2800      	cmp	r0, #0
 80022c2:	bfab      	itete	ge
 80022c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80022c6:	89a3      	ldrhlt	r3, [r4, #12]
 80022c8:	181b      	addge	r3, r3, r0
 80022ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80022ce:	bfac      	ite	ge
 80022d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80022d2:	81a3      	strhlt	r3, [r4, #12]
 80022d4:	bd10      	pop	{r4, pc}

080022d6 <__swrite>:
 80022d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022da:	461f      	mov	r7, r3
 80022dc:	898b      	ldrh	r3, [r1, #12]
 80022de:	05db      	lsls	r3, r3, #23
 80022e0:	4605      	mov	r5, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	4616      	mov	r6, r2
 80022e6:	d505      	bpl.n	80022f4 <__swrite+0x1e>
 80022e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022ec:	2302      	movs	r3, #2
 80022ee:	2200      	movs	r2, #0
 80022f0:	f000 f868 	bl	80023c4 <_lseek_r>
 80022f4:	89a3      	ldrh	r3, [r4, #12]
 80022f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022fe:	81a3      	strh	r3, [r4, #12]
 8002300:	4632      	mov	r2, r6
 8002302:	463b      	mov	r3, r7
 8002304:	4628      	mov	r0, r5
 8002306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800230a:	f000 b817 	b.w	800233c <_write_r>

0800230e <__sseek>:
 800230e:	b510      	push	{r4, lr}
 8002310:	460c      	mov	r4, r1
 8002312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002316:	f000 f855 	bl	80023c4 <_lseek_r>
 800231a:	1c43      	adds	r3, r0, #1
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	bf15      	itete	ne
 8002320:	6560      	strne	r0, [r4, #84]	; 0x54
 8002322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800232a:	81a3      	strheq	r3, [r4, #12]
 800232c:	bf18      	it	ne
 800232e:	81a3      	strhne	r3, [r4, #12]
 8002330:	bd10      	pop	{r4, pc}

08002332 <__sclose>:
 8002332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002336:	f000 b813 	b.w	8002360 <_close_r>
	...

0800233c <_write_r>:
 800233c:	b538      	push	{r3, r4, r5, lr}
 800233e:	4d07      	ldr	r5, [pc, #28]	; (800235c <_write_r+0x20>)
 8002340:	4604      	mov	r4, r0
 8002342:	4608      	mov	r0, r1
 8002344:	4611      	mov	r1, r2
 8002346:	2200      	movs	r2, #0
 8002348:	602a      	str	r2, [r5, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f7fe ffcb 	bl	80012e6 <_write>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_write_r+0x1e>
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	b103      	cbz	r3, 800235a <_write_r+0x1e>
 8002358:	6023      	str	r3, [r4, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	200000c4 	.word	0x200000c4

08002360 <_close_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4d06      	ldr	r5, [pc, #24]	; (800237c <_close_r+0x1c>)
 8002364:	2300      	movs	r3, #0
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	602b      	str	r3, [r5, #0]
 800236c:	f7fe ffd7 	bl	800131e <_close>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d102      	bne.n	800237a <_close_r+0x1a>
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	b103      	cbz	r3, 800237a <_close_r+0x1a>
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	200000c4 	.word	0x200000c4

08002380 <_fstat_r>:
 8002380:	b538      	push	{r3, r4, r5, lr}
 8002382:	4d07      	ldr	r5, [pc, #28]	; (80023a0 <_fstat_r+0x20>)
 8002384:	2300      	movs	r3, #0
 8002386:	4604      	mov	r4, r0
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	602b      	str	r3, [r5, #0]
 800238e:	f7fe ffd2 	bl	8001336 <_fstat>
 8002392:	1c43      	adds	r3, r0, #1
 8002394:	d102      	bne.n	800239c <_fstat_r+0x1c>
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	b103      	cbz	r3, 800239c <_fstat_r+0x1c>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	bd38      	pop	{r3, r4, r5, pc}
 800239e:	bf00      	nop
 80023a0:	200000c4 	.word	0x200000c4

080023a4 <_isatty_r>:
 80023a4:	b538      	push	{r3, r4, r5, lr}
 80023a6:	4d06      	ldr	r5, [pc, #24]	; (80023c0 <_isatty_r+0x1c>)
 80023a8:	2300      	movs	r3, #0
 80023aa:	4604      	mov	r4, r0
 80023ac:	4608      	mov	r0, r1
 80023ae:	602b      	str	r3, [r5, #0]
 80023b0:	f7fe ffd1 	bl	8001356 <_isatty>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_isatty_r+0x1a>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_isatty_r+0x1a>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	200000c4 	.word	0x200000c4

080023c4 <_lseek_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4d07      	ldr	r5, [pc, #28]	; (80023e4 <_lseek_r+0x20>)
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe ffca 	bl	800136c <_lseek>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_lseek_r+0x1e>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_lseek_r+0x1e>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	200000c4 	.word	0x200000c4

080023e8 <__malloc_lock>:
 80023e8:	4801      	ldr	r0, [pc, #4]	; (80023f0 <__malloc_lock+0x8>)
 80023ea:	f7ff bb55 	b.w	8001a98 <__retarget_lock_acquire_recursive>
 80023ee:	bf00      	nop
 80023f0:	200000bc 	.word	0x200000bc

080023f4 <__malloc_unlock>:
 80023f4:	4801      	ldr	r0, [pc, #4]	; (80023fc <__malloc_unlock+0x8>)
 80023f6:	f7ff bb50 	b.w	8001a9a <__retarget_lock_release_recursive>
 80023fa:	bf00      	nop
 80023fc:	200000bc 	.word	0x200000bc

08002400 <_read_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	; (8002420 <_read_r+0x20>)
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	2200      	movs	r2, #0
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f7fe ff4c 	bl	80012ac <_read>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	d102      	bne.n	800241e <_read_r+0x1e>
 8002418:	682b      	ldr	r3, [r5, #0]
 800241a:	b103      	cbz	r3, 800241e <_read_r+0x1e>
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	bd38      	pop	{r3, r4, r5, pc}
 8002420:	200000c4 	.word	0x200000c4

08002424 <_init>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr

08002430 <_fini>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr
